"use strict";(self.webpackChunkshahpreetk_github_io=self.webpackChunkshahpreetk_github_io||[]).push([[8579],{5811:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>l});var n=t(6567),o=t(4848),r=t(8453);const s={slug:"git-tips-and-tricks",title:"Git Tips and Tricks",description:"A collection of useful Git tips and tricks to enhance your workflow and productivity.",authors:"shahpreetk",tags:["git","version-control","productivity","github"]},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Efficiently Managing Commits with <code>git rebase</code>",id:"efficiently-managing-commits-with-git-rebase",level:3},{value:"Why Use Rebasing?",id:"why-use-rebasing",level:4},{value:"Using <code>git bisect</code> to Find Bugs",id:"using-git-bisect-to-find-bugs",level:3},{value:"Using <code>git reflog</code> to Recover Lost Commits",id:"using-git-reflog-to-recover-lost-commits",level:3},{value:"Cherry-Picking Specific Commits (<code>git cherry-pick</code>)",id:"cherry-picking-specific-commits-git-cherry-pick",level:3}];function h(e){const i={admonition:"admonition",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"Git is an essential tool for developers, providing a robust version control system that facilitates code management, collaboration, and version tracking. While many developers use Git daily, mastering some advanced features can significantly improve your workflow and productivity. In this article, we\u2019ll cover some handy Git tips and tricks that can streamline your development process."}),"\n",(0,o.jsxs)(i.h3,{id:"efficiently-managing-commits-with-git-rebase",children:["Efficiently Managing Commits with ",(0,o.jsx)(i.code,{children:"git rebase"})]}),"\n",(0,o.jsx)(i.p,{children:"Rebasing is one of Git\u2019s most powerful features, allowing you to clean up and restructure your commit history. It helps you keep your commit timeline more concise by combining or reordering commits, making the project history easier to understand and maintain."}),"\n",(0,o.jsxs)(i.p,{children:["Here\u2019s a basic example of how to rebase your feature branch onto the latest state of the ",(0,o.jsx)(i.code,{children:"main"})," branch:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git checkout main\ngit pull --all\ngit checkout <feature-branch>\ngit rebase -i main\n"})}),"\n",(0,o.jsxs)(i.p,{children:["This command opens an interactive rebase session (",(0,o.jsx)(i.code,{children:"-i"}),"), where you can choose to squash, reorder, or edit individual commits. In the interactive rebase editor, you\u2019ll see options like ",(0,o.jsx)(i.code,{children:"pick"}),", ",(0,o.jsx)(i.code,{children:"reword"}),", ",(0,o.jsx)(i.code,{children:"squash"}),", and ",(0,o.jsx)(i.code,{children:"edit"}),", giving you control over how each commit should be handled."]}),"\n",(0,o.jsxs)(i.p,{children:["Once you\u2019ve made your adjustments, save and close the editor (",(0,o.jsx)(i.code,{children:"Esc"}),", followed by ",(0,o.jsx)(i.code,{children:":wq"}),"). If there are no conflicts, Git will automatically reapply your changes on top of the ",(0,o.jsx)(i.code,{children:"main"})," branch."]}),"\n",(0,o.jsx)(i.p,{children:"However, if conflicts arise during the rebase process, Git will pause and allow you to resolve them manually. After resolving conflicts, use:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git rebase --continue\n"})}),"\n",(0,o.jsxs)(i.p,{children:["Repeat this process until the rebase is complete. Once finished, you\u2019ll see a message like ",(0,o.jsx)(i.code,{children:"Successfully rebased...."})," At this point, you\u2019ll need to push your changes with a force push:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git push origin <feature-branch> --force\n"})}),"\n",(0,o.jsx)(i.p,{children:"This is necessary because you have rewritten the commit history, and a standard push would result in conflicts."}),"\n",(0,o.jsx)(i.h4,{id:"why-use-rebasing",children:"Why Use Rebasing?"}),"\n",(0,o.jsx)(i.p,{children:'The primary advantage of rebasing is maintaining a cleaner and linear commit history. Instead of creating "merge commits" that branch off, rebasing applies your commits directly on top of the target branch, creating a straight line of progress. This makes it easier to follow the evolution of the project and track changes back to their origins without needing to navigate through branches and merge commits.'}),"\n",(0,o.jsx)(i.admonition,{type:"warning",children:(0,o.jsx)(i.p,{children:"Be cautious when using git rebase in a shared branch. Since rebasing rewrites commit history, any collaborators who have pulled the original commit history will encounter issues. Only force-push after a rebase when you are sure others aren\u2019t depending on your branch."})}),"\n",(0,o.jsxs)(i.h3,{id:"using-git-bisect-to-find-bugs",children:["Using ",(0,o.jsx)(i.code,{children:"git bisect"})," to Find Bugs"]}),"\n",(0,o.jsxs)(i.p,{children:["When you're trying to locate the commit that introduced a bug in a large codebase, ",(0,o.jsx)(i.code,{children:"git bisect"})," is incredibly useful. It performs a binary search through your commit history to pinpoint where things went wrong."]}),"\n",(0,o.jsxs)(i.p,{children:["To use ",(0,o.jsx)(i.code,{children:"git bisect"}),":"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git bisect start\ngit bisect bad #mark the current commit as bad\ngit bisect good <commit-SHA> #mark a known good commit (like a tag or SHA)\n"})}),"\n",(0,o.jsx)(i.p,{children:'Git will start checking commits between the good and bad points, allowing you to test each one. You can mark each commit as "good" or "bad" until you find the problematic commit. After you\u2019ve found it:'}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git bisect reset\n"})}),"\n",(0,o.jsxs)(i.h3,{id:"using-git-reflog-to-recover-lost-commits",children:["Using ",(0,o.jsx)(i.code,{children:"git reflog"})," to Recover Lost Commits"]}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"git reflog"})," keeps a log of every action you\u2019ve taken in Git, even after commits are deleted or reset. It\u2019s useful for recovering commits that you may have thought were lost."]}),"\n",(0,o.jsx)(i.p,{children:"For example, if you accidentally reset a branch or force-pushed to the wrong branch, you can find your lost commits with:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git reflog\n"})}),"\n",(0,o.jsx)(i.p,{children:"Once you find the SHA of the lost commit, you can restore it with:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git checkout <commit-SHA>\n"})}),"\n",(0,o.jsxs)(i.h3,{id:"cherry-picking-specific-commits-git-cherry-pick",children:["Cherry-Picking Specific Commits (",(0,o.jsx)(i.code,{children:"git cherry-pick"}),")"]}),"\n",(0,o.jsxs)(i.p,{children:["If you need to apply a specific commit from one branch to another without merging the entire branch, you can use ",(0,o.jsx)(i.code,{children:"git cherry-pick"}),". This command applies individual commits to your current branch:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"git cherry-pick <commit-SHA>\n"})}),"\n",(0,o.jsx)(i.admonition,{type:"info",children:(0,o.jsxs)(i.p,{children:["To get the commit-SHA of a commit, you can use ",(0,o.jsx)(i.code,{children:"git log --oneline"}),". Copy the SHA of the commit you want to cherry-pick and use it in the command above."]})}),"\n",(0,o.jsx)(i.p,{children:"This is helpful when you need to bring over a bug fix or a feature that\u2019s present in one branch but not another."})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>a});var n=t(6540);const o={},r=n.createContext(o);function s(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:i},e.children)}},6567:e=>{e.exports=JSON.parse('{"permalink":"/blog/git-tips-and-tricks","source":"@site/blog/2024-10-12-git-tips-and-tricks.md","title":"Git Tips and Tricks","description":"A collection of useful Git tips and tricks to enhance your workflow and productivity.","date":"2024-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"version-control","permalink":"/blog/tags/version-control"},{"inline":true,"label":"productivity","permalink":"/blog/tags/productivity"},{"inline":true,"label":"github","permalink":"/blog/tags/github"}],"readingTime":3.525,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\\\","key":"shahpreetk"}],"frontMatter":{"slug":"git-tips-and-tricks","title":"Git Tips and Tricks","description":"A collection of useful Git tips and tricks to enhance your workflow and productivity.","authors":"shahpreetk","tags":["git","version-control","productivity","github"]},"unlisted":false,"nextItem":{"title":"Java Spring Boot Project - Part 3","permalink":"/blog/setting-up-a-java-spring-boot-project-part-3"}}')}}]);