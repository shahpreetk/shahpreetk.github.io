"use strict";(self.webpackChunkshahpreetk_github_io=self.webpackChunkshahpreetk_github_io||[]).push([[6523],{4185:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var r=a(715),t=a(4848),i=a(8453);const s={slug:"data-types-in-java",title:"Data Types in Java",description:"Dive into the different data types in Java, including primitive types, reference types, and wrapper classes.",authors:"shahpreetk",tags:["java","data-types","primitive-types","reference-types","wrapper-classes"]},l=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Introduction to Data Types in Java",id:"introduction-to-data-types-in-java",level:2},{value:"Primitive Data Types",id:"primitive-data-types",level:2},{value:"Reference Data Types",id:"reference-data-types",level:2},{value:"Wrapper Classes",id:"wrapper-classes",level:2},{value:"Differences Between Primitive and Wrapper Classes",id:"differences-between-primitive-and-wrapper-classes",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction-to-data-types-in-java",children:"Introduction to Data Types in Java"}),"\n",(0,t.jsx)(n.p,{children:"Data types in Java specify the size, type, and operations of data that can be stored in a variable. In Java, a statically-typed language, every variable must be declared with a data type. The data type of a variable determines how much space it occupies in memory and what kind of operations can be performed on it."}),"\n","\n",(0,t.jsx)(n.p,{children:"Java categorizes data types into primitive types, reference types, and wrapper classes."}),"\n",(0,t.jsx)(n.h2,{id:"primitive-data-types",children:"Primitive Data Types"}),"\n",(0,t.jsx)(n.p,{children:"Primitive data types are built-in Java types that are not objects; they represent raw values. They include:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"byte"}),": 8-bit signed integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"short"}),": 16-bit signed integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"int"}),": 32-bit signed integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"long"}),": 64-bit signed integer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"float"}),": 32-bit floating-point number"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"double"}),": 64-bit floating-point number"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"char"}),": 16-bit Unicode character"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"boolean"}),": true or false"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"byte exampleByte = 100;\nshort exampleShort = 5000;\nint exampleInt = 123456;\nlong exampleLong = 12345678910L;\nfloat exampleFloat = 3.14f;\ndouble exampleDouble = 3.14159;\nchar exampleChar = 'A';\nboolean exampleBoolean = true;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reference-data-types",children:"Reference Data Types"}),"\n",(0,t.jsx)(n.p,{children:"Reference data types refer to objects and hence they are stored by reference. Examples include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Basic Reference Types:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"class"}),": Holds a reference to a class."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"interface"}),": A reference to an implemented interface."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enum"}),": A special data type that enables for variables to be a set of predefined constants."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lambda"}),": A reference to a lambda expression."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"String"}),": A reference to a string."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Runnable"}),": A reference to a runnable object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Record"}),": A reference to a record."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'  // Class\n  class ExampleClass {\n      // Code...\n  }\n\n  // Interface\n  interface ExampleInterface {\n      // Code...\n  }\n\n  // Enum\n  enum Size {SMALL, MEDIUM, LARGE}\n  Size exampleSize = Size.MEDIUM;\n\n  // Lambda\n  Runnable exampleRunnable = () -> System.out.println("Running");\n\n  // Lambda with parameters\n  Comparator<Integer> exampleComparator = (a, b) -> a - b;\n\n  // Lambda with return statement\n  Function<Integer, Integer> exampleFunction = (a) -> {\n      return a * a;\n  };\n\n  // String\n  String exampleString = "Hello, World!";\n\n  // Runnable\n  Runnable exampleRunnable = () -> {\n      // Code...\n  };\n\n  // Record\n  record ExampleRecord(int id, String name) {\n      // Code...\n  }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Collections and Iterators:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"array"}),": A reference to a dynamically allocated array."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"List"}),": A reference to a dynamically sized collection of elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Map"}),": A reference to a collection of key-value pairs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Set"}),": A reference to a collection that contains no duplicate elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Iterator"}),": A reference to an object that enables traversal through a collection."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"  // array\n  int[] exampleArray = new int[5];\n\n  // List\n  List<String> exampleList = new ArrayList<>();\n\n  // Map\n  Map<String, Integer> exampleMap = new HashMap<>();\n\n  // Set\n  Set<String> exampleSet = new HashSet<>();\n\n  // Iterator\n  Iterator<String> exampleIterator = exampleList.iterator();\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Concurrency and IO:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Thread"}),": A reference to a thread of execution."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Exception"}),": A reference to an exception object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Annotation"}),": A reference to an annotation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Socket"}),": A reference to a network communication endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"File"}),": A reference to a file or directory in the file system."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Scanner"}),": A reference to an object used to parse primitive types and strings from an input stream."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'  // Thread\n  Thread exampleThread = new Thread(() -> {\n      // Code...\n  });\n\n  // Exception\n  try {\n      // Code...\n  } catch (Exception e) {\n      // Code...\n  }\n\n  // Annotation\n  @interface ExampleAnnotation {\n      // Code...\n  }\n\n  // Socket\n  Socket exampleSocket = new Socket("localhost", 8080);\n\n  // File\n  File exampleFile = new File("example.txt");\n\n  // Scanner\n  Scanner exampleScanner = new Scanner(System.in);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"wrapper-classes",children:"Wrapper Classes"}),"\n",(0,t.jsx)(n.p,{children:"Java also provides a set of wrapper classes that correspond to the primitive data types. These wrapper classes are used to create objects from primitive data types, and to perform operations on primitive data types. The wrapper classes are:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Byte"}),": Wrapper class for ",(0,t.jsx)(n.code,{children:"byte"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Short"}),": Wrapper class for ",(0,t.jsx)(n.code,{children:"short"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Integer"}),": Wrapper class for ",(0,t.jsx)(n.code,{children:"int"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Long"}),": Wrapper class for ",(0,t.jsx)(n.code,{children:"long"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Float"}),": Wrapper class for ",(0,t.jsx)(n.code,{children:"float"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Byte exampleWrappedByte = 100;\nShort exampleWrappedShort = 5000;\nInteger exampleWrappedInt = 123456;\nLong exampleWrappedLong = 12345678910L;\nFloat exampleWrappedFloat = 3.14f;\nDouble exampleWrappedDouble = 3.14159;\nCharacter exampleWrappedChar = 'A';\nBoolean exampleWrappedBoolean = true;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. For example, converting an ",(0,t.jsx)(n.code,{children:"int"})," to an ",(0,t.jsx)(n.code,{children:"Integer"}),", a ",(0,t.jsx)(n.code,{children:"double"})," to a ",(0,t.jsx)(n.code,{children:"Double"}),", etc. Similarly, unboxing is the reverse process:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Autoboxing\nInteger autoBoxedInt = 10; // int to Integer\n\n// Unboxing\nint unboxedInt = autoBoxedInt; // Integer to int\n"})}),"\n",(0,t.jsx)(n.h2,{id:"differences-between-primitive-and-wrapper-classes",children:"Differences Between Primitive and Wrapper Classes"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Aspect"}),(0,t.jsx)("th",{children:"Primitive Types"}),(0,t.jsx)("th",{children:"Wrapper Classes"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Type"}),(0,t.jsx)("td",{children:"Basic data type"}),(0,t.jsx)("td",{children:"Class type (Object)"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Storage"}),(0,t.jsx)("td",{children:"Stack"}),(0,t.jsx)("td",{children:"Heap"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Default Value"}),(0,t.jsx)("td",{children:"Has default value (e.g., 0 for int)"}),(0,t.jsx)("td",{children:"Null (if not initialized)"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Size"}),(0,t.jsx)("td",{children:"Fixed size"}),(0,t.jsx)("td",{children:"Larger than primitives due to object overhead"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Speed"}),(0,t.jsx)("td",{children:"Fast"}),(0,t.jsx)("td",{children:"Slower than primitives due to additional processing"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Utility"}),(0,t.jsx)("td",{children:"Limited to basic arithmetic and logical operations"}),(0,t.jsx)("td",{children:"Comes with methods for conversion, comparison, etc."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Usage in Generics"}),(0,t.jsx)("td",{children:"Not applicable"}),(0,t.jsx)("td",{children:"Can be used with generics and collections"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"Nullability"}),(0,t.jsx)("td",{children:"Cannot be null"}),(0,t.jsx)("td",{children:"Can be null"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In this article, we discussed the different data types and access modifiers in Java. We learned about primitive types, reference types, and wrapper classes, and how they differ from each other. We also explored the four access modifiers in Java and their use cases. Understanding these concepts is essential for writing efficient and secure Java code."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var r=a(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},715:e=>{e.exports=JSON.parse('{"permalink":"/blog/data-types-in-java","source":"@site/blog/2024-03-06/2024-03-02-data-types-java.mdx","title":"Data Types in Java","description":"Dive into the different data types in Java, including primitive types, reference types, and wrapper classes.","date":"2024-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"data-types","permalink":"/blog/tags/data-types"},{"inline":true,"label":"primitive-types","permalink":"/blog/tags/primitive-types"},{"inline":true,"label":"reference-types","permalink":"/blog/tags/reference-types"},{"inline":true,"label":"wrapper-classes","permalink":"/blog/tags/wrapper-classes"}],"readingTime":4.58,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\\\","key":"shahpreetk"}],"frontMatter":{"slug":"data-types-in-java","title":"Data Types in Java","description":"Dive into the different data types in Java, including primitive types, reference types, and wrapper classes.","authors":"shahpreetk","tags":["java","data-types","primitive-types","reference-types","wrapper-classes"]},"unlisted":false,"prevItem":{"title":"Access Modifiers in Java","permalink":"/blog/access-modifiers-in-java"},"nextItem":{"title":"Java Deep Dive","permalink":"/blog/java-interview-guide"}}')}}]);