"use strict";(self.webpackChunkshahpreetk_github_io=self.webpackChunkshahpreetk_github_io||[]).push([[2290],{3252:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var i=n(4835),o=n(4848),a=n(8453);const r={slug:"setting-up-a-java-spring-boot-project-part-3",title:"Java Spring Boot Project - Part 3",description:"In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.",authors:"shahpreetk",tags:["java","springboot","intellij","exception-handling","custom-errors","swagger","api-documentation","unit-testing","junit"]},s=void 0,l={authorsImageUrls:[void 0]},p=[];function g(t){const e={a:"a",p:"p",...(0,a.R)(),...t.components};return(0,o.jsxs)(e.p,{children:["In the previous blog post, we used Lombok to reduce boilerplate code and added CRUD operations to our Spring Boot project. In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using ",(0,o.jsx)(e.a,{href:"https://swagger.io/",children:"Swagger"})," and update our codebase with exception handling."]})}function u(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(g,{...t})}):g(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>s});var i=n(6540);const o={},a=i.createContext(o);function r(t){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),i.createElement(a.Provider,{value:e},t.children)}},4835:t=>{t.exports=JSON.parse('{"permalink":"/blog/setting-up-a-java-spring-boot-project-part-3","source":"@site/blog/2024-06-11/2024-06-11-setting-up-a-java-spring-boot-project-part-3.md","title":"Java Spring Boot Project - Part 3","description":"In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.","date":"2024-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"intellij","permalink":"/blog/tags/intellij"},{"inline":true,"label":"exception-handling","permalink":"/blog/tags/exception-handling"},{"inline":true,"label":"custom-errors","permalink":"/blog/tags/custom-errors"},{"inline":true,"label":"swagger","permalink":"/blog/tags/swagger"},{"inline":true,"label":"api-documentation","permalink":"/blog/tags/api-documentation"},{"inline":true,"label":"unit-testing","permalink":"/blog/tags/unit-testing"},{"inline":true,"label":"junit","permalink":"/blog/tags/junit"}],"readingTime":9.825,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\\\","key":"shahpreetk"}],"frontMatter":{"slug":"setting-up-a-java-spring-boot-project-part-3","title":"Java Spring Boot Project - Part 3","description":"In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.","authors":"shahpreetk","tags":["java","springboot","intellij","exception-handling","custom-errors","swagger","api-documentation","unit-testing","junit"]},"unlisted":false,"prevItem":{"title":"Git Tips and Tricks","permalink":"/blog/git-tips-and-tricks"},"nextItem":{"title":"Java Spring Boot Project - Part 2","permalink":"/blog/setting-up-a-java-spring-boot-project-part-2"}}')}}]);