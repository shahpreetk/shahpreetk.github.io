"use strict";(self.webpackChunkshahpreetk_github_io=self.webpackChunkshahpreetk_github_io||[]).push([[9555],{3056:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var o=t(2049),r=t(4848),n=t(8453);const i={slug:"garbage-collector-in-java",title:"Garbage Collector in Java",description:"Garbage Collection in Java is the process of reclaiming the runtime unused memory automatically. In this blog, we will learn about the Garbage Collector in Java.",authors:"shahpreetk",tags:["java","garbage-collector","memory-management"]},l=void 0,s={authorsImageUrls:[void 0]},c=[{value:"Introduction to Garbage Collection",id:"introduction-to-garbage-collection",level:2}];function g(e){const a={h2:"h2",p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"introduction-to-garbage-collection",children:"Introduction to Garbage Collection"}),"\n",(0,r.jsx)(a.p,{children:"In languages like C/C++, managing memory manually is a crucial task for programmers. Forgetting to deallocate memory can lead to memory leaks and program crashes due to insufficient memory. However, Java provides an automatic memory management system known as the Garbage Collector (GC), which handles memory deallocation for you."})]})}function m(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>l});var o=t(6540);const r={},n=o.createContext(r);function i(e){const a=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(n.Provider,{value:a},e.children)}},2049:e=>{e.exports=JSON.parse('{"permalink":"/blog/garbage-collector-in-java","source":"@site/blog/2024-03-06/2024-03-04-garbage-collector-java.md","title":"Garbage Collector in Java","description":"Garbage Collection in Java is the process of reclaiming the runtime unused memory automatically. In this blog, we will learn about the Garbage Collector in Java.","date":"2024-03-04T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"garbage-collector","permalink":"/blog/tags/garbage-collector"},{"inline":true,"label":"memory-management","permalink":"/blog/tags/memory-management"}],"readingTime":3.925,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\\\","key":"shahpreetk"}],"frontMatter":{"slug":"garbage-collector-in-java","title":"Garbage Collector in Java","description":"Garbage Collection in Java is the process of reclaiming the runtime unused memory automatically. In this blog, we will learn about the Garbage Collector in Java.","authors":"shahpreetk","tags":["java","garbage-collector","memory-management"]},"unlisted":false,"prevItem":{"title":"Multithreading in Java","permalink":"/blog/multithreading-in-java"},"nextItem":{"title":"Access Modifiers in Java","permalink":"/blog/access-modifiers-in-java"}}')}}]);