{"archive":{"blogPosts":[{"id":"git-tips-and-tricks","metadata":{"permalink":"/blog/git-tips-and-tricks","source":"@site/blog/2024-10-12-git-tips-and-tricks.md","title":"Git Tips and Tricks","description":"A collection of useful Git tips and tricks to enhance your workflow and productivity.","date":"2024-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"version-control","permalink":"/blog/tags/version-control"},{"inline":true,"label":"productivity","permalink":"/blog/tags/productivity"},{"inline":true,"label":"github","permalink":"/blog/tags/github"}],"readingTime":3.525,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"git-tips-and-tricks","title":"Git Tips and Tricks","description":"A collection of useful Git tips and tricks to enhance your workflow and productivity.","authors":"shahpreetk","tags":["git","version-control","productivity","github"]},"unlisted":false,"nextItem":{"title":"Java Spring Boot Project - Part 3","permalink":"/blog/setting-up-a-java-spring-boot-project-part-3"}},"content":"Git is an essential tool for developers, providing a robust version control system that facilitates code management, collaboration, and version tracking. While many developers use Git daily, mastering some advanced features can significantly improve your workflow and productivity. In this article, we’ll cover some handy Git tips and tricks that can streamline your development process.\n\n<!-- truncate -->\n\n### Efficiently Managing Commits with `git rebase`\n\nRebasing is one of Git’s most powerful features, allowing you to clean up and restructure your commit history. It helps you keep your commit timeline more concise by combining or reordering commits, making the project history easier to understand and maintain.\n\nHere’s a basic example of how to rebase your feature branch onto the latest state of the `main` branch:\n\n```bash\ngit checkout main\ngit pull --all\ngit checkout <feature-branch>\ngit rebase -i main\n```\n\nThis command opens an interactive rebase session (`-i`), where you can choose to squash, reorder, or edit individual commits. In the interactive rebase editor, you’ll see options like `pick`, `reword`, `squash`, and `edit`, giving you control over how each commit should be handled.\n\nOnce you’ve made your adjustments, save and close the editor (`Esc`, followed by `:wq`). If there are no conflicts, Git will automatically reapply your changes on top of the `main` branch.\n\nHowever, if conflicts arise during the rebase process, Git will pause and allow you to resolve them manually. After resolving conflicts, use:\n\n```bash\ngit rebase --continue\n```\n\nRepeat this process until the rebase is complete. Once finished, you’ll see a message like `Successfully rebased....` At this point, you’ll need to push your changes with a force push:\n\n```bash\ngit push origin <feature-branch> --force\n```\n\nThis is necessary because you have rewritten the commit history, and a standard push would result in conflicts.\n\n#### Why Use Rebasing?\nThe primary advantage of rebasing is maintaining a cleaner and linear commit history. Instead of creating \"merge commits\" that branch off, rebasing applies your commits directly on top of the target branch, creating a straight line of progress. This makes it easier to follow the evolution of the project and track changes back to their origins without needing to navigate through branches and merge commits.\n\n:::warning\n  Be cautious when using git rebase in a shared branch. Since rebasing rewrites commit history, any collaborators who have pulled the original commit history will encounter issues. Only force-push after a rebase when you are sure others aren’t depending on your branch.\n:::\n\n### Using `git bisect` to Find Bugs\n\nWhen you're trying to locate the commit that introduced a bug in a large codebase, `git bisect` is incredibly useful. It performs a binary search through your commit history to pinpoint where things went wrong.\n\nTo use `git bisect`:\n\n```bash\ngit bisect start\ngit bisect bad #mark the current commit as bad\ngit bisect good <commit-SHA> #mark a known good commit (like a tag or SHA)\n```\n\nGit will start checking commits between the good and bad points, allowing you to test each one. You can mark each commit as \"good\" or \"bad\" until you find the problematic commit. After you’ve found it:\n\n```bash\ngit bisect reset\n```\n\n### Using `git reflog` to Recover Lost Commits\n\n`git reflog` keeps a log of every action you’ve taken in Git, even after commits are deleted or reset. It’s useful for recovering commits that you may have thought were lost.\n\nFor example, if you accidentally reset a branch or force-pushed to the wrong branch, you can find your lost commits with:\n\n```bash\ngit reflog\n```\n\nOnce you find the SHA of the lost commit, you can restore it with:\n\n```bash\ngit checkout <commit-SHA>\n```\n\n### Cherry-Picking Specific Commits (`git cherry-pick`)\n\nIf you need to apply a specific commit from one branch to another without merging the entire branch, you can use `git cherry-pick`. This command applies individual commits to your current branch:\n\n```bash\ngit cherry-pick <commit-SHA>\n```\n\n:::info\n  To get the commit-SHA of a commit, you can use `git log --oneline`. Copy the SHA of the commit you want to cherry-pick and use it in the command above.\n:::\n\nThis is helpful when you need to bring over a bug fix or a feature that’s present in one branch but not another."},{"id":"setting-up-a-java-spring-boot-project-part-3","metadata":{"permalink":"/blog/setting-up-a-java-spring-boot-project-part-3","source":"@site/blog/2024-06-11/2024-06-11-setting-up-a-java-spring-boot-project-part-3.md","title":"Java Spring Boot Project - Part 3","description":"In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.","date":"2024-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"intellij","permalink":"/blog/tags/intellij"},{"inline":true,"label":"exception-handling","permalink":"/blog/tags/exception-handling"},{"inline":true,"label":"custom-errors","permalink":"/blog/tags/custom-errors"},{"inline":true,"label":"swagger","permalink":"/blog/tags/swagger"},{"inline":true,"label":"api-documentation","permalink":"/blog/tags/api-documentation"},{"inline":true,"label":"unit-testing","permalink":"/blog/tags/unit-testing"},{"inline":true,"label":"junit","permalink":"/blog/tags/junit"}],"readingTime":9.825,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"setting-up-a-java-spring-boot-project-part-3","title":"Java Spring Boot Project - Part 3","description":"In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.","authors":"shahpreetk","tags":["java","springboot","intellij","exception-handling","custom-errors","swagger","api-documentation","unit-testing","junit"]},"unlisted":false,"prevItem":{"title":"Git Tips and Tricks","permalink":"/blog/git-tips-and-tricks"},"nextItem":{"title":"Java Spring Boot Project - Part 2","permalink":"/blog/setting-up-a-java-spring-boot-project-part-2"}},"content":"In the previous blog post, we used Lombok to reduce boilerplate code and added CRUD operations to our Spring Boot project. In this blog post, we will write unit tests for the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.\n\n<!-- truncate -->\n\n## Custom Exception Handling\n\nCustom exception handling is invaluable as it allows us to define and throw exceptions specific to our application's needs. By creating custom exceptions, we can handle specific conditions and scenarios more effectively. This not only makes our codebase cleaner and more maintainable but also simplifies debugging by providing clear, meaningful error messages. Additionally, custom exceptions enhance the user experience by offering precise and understandable feedback when errors occur.\n\nWe will create a custom exception class named `BookNotFoundException` that extends the `RuntimeException` class. This exception will be unchecked, meaning it occurs at runtime. It will be thrown when a user searches for or attempts to update a book that is not found in the database.\n\n| ![BookNotFoundException Class](./book-not-found-exception.png) |\n| -------------------------------------------------------------- |\n\nUpdate the `updateBook(int id, Book updatedBook)` method in the `BookService` class to throw a `BookNotFoundException` if the book is not found in the database.\n\n```java\n  public Book updateBook(int id, Book updatedBook) {\n      if (updatedBook.getId() != id) {\n          throw new RuntimeException(\"The ID in the request body does not match the ID in the URL.\");\n      }\n      Optional<Book> optionalBook = bookLibraryRepository.findById(id);\n      if (optionalBook.isPresent()) {\n          Book existingBook = optionalBook.get();\n          existingBook.setName(updatedBook.getName());\n          existingBook.setAuthor(updatedBook.getAuthor());\n          existingBook.setDescription(updatedBook.getDescription());\n          return bookLibraryRepository.save(existingBook);\n      } else {\n          throw new BookNotFoundException(id);\n      }\n  }\n```\n\nIf we run the application and attempt to update a book that does not exist in the database, a `BookNotFoundException` will be thrown, displaying a message in the console logs indicating that the book was not found. However, the response displayed in Hoppscotch.io will still be unclear and generic.\n\nTo provide a more user-friendly message in the response body, we need to create a custom error response class. This class will contain the error message and status code that will be returned to the user when an exception occurs.\n\nCreate a new class named `CustomExceptionHandler`. This class will be annotated with `@ControllerAdvice` and will contain methods to handle specific exceptions. In this case, we will create a method to handle the `BookNotFoundException`.\n\n:::note\n`@ControllerAdvice` in Spring is an annotation used to handle exceptions globally across all controllers. It allows you to define common exception handling logic in one place, ensuring consistent error responses throughout your application. Additionally, you can use it to add global attributes and configure data binding for all controllers, making your code cleaner and easier to maintain.\n:::\n\n| ![CustomExceptionHandler Class](./custom-exception-handler.png) |\n| --------------------------------------------------------------- |\n\nRe-run the application and attempt to update a book that does not exist in the database. The response will now include a custom error message indicating that the book was not found.\n\n| ![Hoppscotch.io BookNotFound error](./hoppscotch-book-not-found.png) |\n| -------------------------------------------------------------------- |\n\nSimilarly, you can create custom exception classes and handlers for other scenarios in your application. For example, I have implemented a service and controller method to GET a book by its ID and used the `BookNotFoundException` to handle cases where the book is not found in the database. You can check the Service class on my [GitHub repository](https://github.com/shahpreetk/java-spring-boot-book-library/blob/main/src/main/java/com/shahpreetk/javaSpringBootBookLibrary/service/BookLibraryService.java).\n\n## API Documentation with Swagger\n\nAPI documentation is essential for developers using your API. It provides detailed information about the endpoints, request and response formats, error codes, and other relevant details. By creating API documentation, you make it easier for developers to understand and interact with your API, reducing the learning curve and enabling faster integration.\n\n[Swagger](https://swagger.io/) is a popular tool for generating API documentation. It allows you to define your API using the OpenAPI Specification (formerly known as Swagger Specification) and automatically generates interactive documentation based on your API definition. Swagger provides a user-friendly interface that displays all your endpoints, request and response formats, and other details in an organized and visually appealing manner.\n\nTo generate the Swagger documentation for our Spring Boot project, we will use the `springdoc-openapi` library. This library integrates Swagger with Spring Boot v3, allowing you to create API documentation easily and efficiently. Add the following code to the `build.gradle` file.\n\n```groovy\n  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'\n```\n\nRun the application and navigate to [http://localhost:8080/v3/api-docs](http://localhost:8080/v3/api-docs) to view the generated OpenAPI JSON documentation.\n\n| ![OpenAPI JSON documentation](./open-api-json-docs.png) |\n| ------------------------------------------------------- |\n\nYou can now navigate to [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html) to view the Swagger UI interface, which offers an interactive documentation view of your API. The springdoc-openapi library includes Swagger UI out-of-the-box, so no additional setup is required. Currently, since we haven't added any custom annotations or descriptions to our endpoints, Swagger UI will display the default information based on the request and response objects. To enhance the documentation, you can add custom annotations and descriptions to your controllers and endpoints. You can check the Swagger code on my [GitHub repository](https://github.com/shahpreetk/java-spring-boot-book-library/blob/main/src/main/java/com/shahpreetk/javaSpringBootBookLibrary/documentation/OpenAPIConfiguration.java).\n\n| ![Swagger UI interface](./swagger-interface.png) |\n| ------------------------------------------------ |\n\n## Unit Testing with JUnit and Mockito\n\nUnit testing is a critical aspect of software development. It allows you to test individual units or components of your codebase in isolation, ensuring that each unit functions correctly and meets the specified requirements. By writing unit tests, you can identify bugs and issues early in the development process, improve code quality, and increase the reliability and maintainability of your application.\n\nWe will use [Mockito](https://site.mockito.org/) to mock dependencies and [JUnit](https://junit.org/junit5/) to write test cases for our service and controller classes. Mockito is a popular mocking framework that allows you to create mock objects for dependencies, enabling you to test your code in isolation. JUnit is a widely used testing framework for Java that provides annotations and assertions to write test cases and validate the behavior of your code.\n\nFor the Controller class, we will write test cases using `MockMvc` to test the CRUD operations. MockMvc is a Spring testing framework that allows you to test Spring MVC controllers without starting a full HTTP server. It provides a fluent API for making requests and validating responses, making it easy to write comprehensive tests for your controllers.\n\nCreate a `BookLibraryControllerTest` class in the `src/test/java/com/example/booklibrary/controller` package.\n\n```java\npackage com.shahpreetk.javaSpringBootBookLibrary.controller;\n\nimport com.shahpreetk.javaSpringBootBookLibrary.Book;\nimport com.shahpreetk.javaSpringBootBookLibrary.exceptions.BookNotFoundException;\nimport com.shahpreetk.javaSpringBootBookLibrary.exceptions.CustomExceptionHandler;\nimport com.shahpreetk.javaSpringBootBookLibrary.service.BookLibraryService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport java.util.List;\n\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyInt;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\npublic class BookLibraryControllerTest {\n\n    private MockMvc mockMvc;\n\n    @Mock\n    private BookLibraryService bookLibraryService;\n\n    @InjectMocks\n    private BookLibraryController bookLibraryController;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        mockMvc = MockMvcBuilders.standaloneSetup(bookLibraryController)\n                .setControllerAdvice(new CustomExceptionHandler())\n                .build();\n    }\n\n    private Book createBook(int id, String name, String author, String description) {\n        Book book = new Book();\n        book.setId(id);\n        book.setName(name);\n        book.setAuthor(author);\n        book.setDescription(description);\n        return book;\n    }\n\n    @Test\n    public void testGetAllBooks() throws Exception {\n        Book book1 = createBook(1, \"Book1\", \"Author1\", \"Description1\");\n        Book book2 = createBook(2, \"Book2\", \"Author2\", \"Description2\");\n        List<Book> books = List.of(book1, book2);\n\n        when(bookLibraryService.getAllBooks()).thenReturn(books);\n\n        mockMvc.perform(get(\"/api/books\"))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(2)))\n                .andExpect(jsonPath(\"$[0].id\").value(1))\n                .andExpect(jsonPath(\"$[0].name\").value(\"Book1\"))\n                .andExpect(jsonPath(\"$[0].author\").value(\"Author1\"))\n                .andExpect(jsonPath(\"$[0].description\").value(\"Description1\"))\n                .andExpect(jsonPath(\"$[1].id\").value(2))\n                .andExpect(jsonPath(\"$[1].name\").value(\"Book2\"))\n                .andExpect(jsonPath(\"$[1].author\").value(\"Author2\"))\n                .andExpect(jsonPath(\"$[1].description\").value(\"Description2\"));\n    }\n}\n```\n\nIn the `BookLibraryControllerTest` class, we have created a test case for the `getAllBooks()` method in the `BookLibraryController` class. We have mocked the `BookLibraryService` dependency using Mockito and defined the behavior of the `getAllBooks()` method to return a list of books. We then use MockMvc to perform a GET request to the `/api/books` endpoint and validate the response using assertions.\n\nYou can write similar test cases for other controller methods and service classes to ensure that your code functions correctly and handles various scenarios effectively. You can find more tests for the Controller on my [GitHub repository](https://github.com/shahpreetk/java-spring-boot-book-library/blob/main/src/test/java/com/shahpreetk/javaSpringBootBookLibrary/controller/BookLibraryControllerTest.java).\n\n```java\npackage com.shahpreetk.javaSpringBootBookLibrary.service;\n\nimport com.shahpreetk.javaSpringBootBookLibrary.Book;\nimport com.shahpreetk.javaSpringBootBookLibrary.BookLibraryRepository;\nimport com.shahpreetk.javaSpringBootBookLibrary.exceptions.BookNotFoundException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\npublic class BookLibraryServiceTest {\n\n    @Mock\n    private BookLibraryRepository bookLibraryRepository;\n\n    @InjectMocks\n    private BookLibraryService bookLibraryService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    private Book createBook(int id, String name, String author, String description) {\n        Book book = new Book();\n        book.setId(id);\n        book.setName(name);\n        book.setAuthor(author);\n        book.setDescription(description);\n        return book;\n    }\n\n    @Test\n    public void testGetAllBooks() {\n        Book book1 = createBook(1, \"Book1\", \"Author1\", \"Description1\");\n        Book book2 = createBook(2, \"Book2\", \"Author2\", \"Description2\");\n\n        when(bookLibraryRepository.findAll()).thenReturn(java.util.List.of(book1, book2));\n\n        List<Book> result = bookLibraryService.getAllBooks();\n\n        assertEquals(2, result.size());\n        assertEquals(\"Book1\", result.getFirst().getName());\n        assertEquals(\"Author1\", result.get(0).getAuthor());\n        assertEquals(\"Description1\", result.get(0).getDescription());\n        assertEquals(\"Book2\", result.get(1).getName());\n        assertEquals(\"Author2\", result.get(1).getAuthor());\n        assertEquals(\"Description2\", result.get(1).getDescription());\n    }\n}\n```\n\n`@Mock` annotation is used to create and initialize mock instances of the fields it is applied to. When a field is annotated with `@Mock`, Mockito will create a mock implementation of that field which can then be used in your tests to simulate the behavior of the actual dependency. This allows you to define how the mock should behave when certain methods are called, without actually invoking the real methods. It's particularly useful for isolating the class under test from its dependencies.\n\n`@InjectMocks` annotation is used to create an instance of the class under test and inject the mock dependencies into it. When a class field is annotated with `@InjectMocks`, Mockito will automatically inject the mocks created with `@Mock (or @Spy)` into this instance. This simplifies the setup process by automatically performing dependency injection, ensuring that the class under test is properly initialized with all its dependencies mocked. This allows you to focus on testing the behavior of the class without worrying about the initialization of its dependencies.\n\n`MockitoAnnotations.openMocks(this)` is a method used in Mockito to initialize the mocks and inject them into the annotated fields of the test class. This method is typically used in the `@BeforeEach` setup method to ensure that the mocks are properly set up before each test case runs.\n\nYou can write similar test cases for other service methods to ensure that your code functions correctly and handles various scenarios effectively. You can find the entire test suite on my [GitHub repository](https://github.com/shahpreetk/java-spring-boot-book-library/tree/main/src/test/java/com/shahpreetk/javaSpringBootBookLibrary).\n\nThis is how you can write unit tests for your Spring Boot application using JUnit and Mockito, create API documentation using Swagger, and update your codebase with custom exception handling. By following these best practices, you can improve the quality, reliability, and maintainability of your codebase, making it easier to develop, test, and deploy your applications.\n\n## Things You Can Learn Next (Intermediate to Advanced)\n\nAs you continue to develop your Book Library application, here are some advanced topics you can explore to enhance its functionality and performance:\n\n- **Add Actuator Endpoints:** Expose health and metrics endpoints to monitor and manage your application more effectively.\n- **Creating Docker Setup:** Containerize your Book Library app for easier deployment and scalability using Docker.\n- **Deploying to a Cloud Platform:** Learn how to deploy your Spring Boot application to cloud platforms like AWS, Azure, or Google Cloud.\n- **Implementing Logging:** Enhance your application with effective logging strategies to monitor and debug more efficiently.\n- **Add Authentication and Authorization:** Protect your endpoints and enhance API security by implementing authentication and authorization mechanisms.\n- **Add Features like Pagination, Sorting, and Rate Limiting:** Improve your API by adding advanced features such as pagination, sorting, and rate limiting.\n- **Implement Caching:** Boost performance by implementing caching strategies to reduce load times and database queries.\n- **Add Internationalization (i18n):** Make your application accessible to a global audience by adding support for multiple languages.\n\nThese topics will help you take your Book Library application to the next level, ensuring it is robust, secure, and scalable.\n\n## Conclusion\n\nIn this three-part blog series, we explored building a Book Library application with Java Spring Boot. We started with project setup and dependencies, then used Lombok for simplifying entity classes and implemented CRUD operations. Finally, we covered unit testing and custom exception handling, emphasizing their importance for robust application development. By following these steps, you’ve created a scalable and maintainable Spring Boot application.\n\n:::info\nFor the complete codebase, visit my [GitHub repository](https://github.com/shahpreetk/java-spring-boot-book-library).\n:::\n\nHappy coding! 🚀"},{"id":"setting-up-a-java-spring-boot-project-part-2","metadata":{"permalink":"/blog/setting-up-a-java-spring-boot-project-part-2","source":"@site/blog/2024-05-20/2024-05-20-setting-up-a-java-spring-boot-project-part-2.md","title":"Java Spring Boot Project - Part 2","description":"In this blog post, we use lombok to create the Book Entity class. We will then create a repository, service and controller class to perform CRUD operations on the Book Entity.","date":"2024-05-20T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"intellij","permalink":"/blog/tags/intellij"},{"inline":true,"label":"gradle","permalink":"/blog/tags/gradle"},{"inline":true,"label":"h2-database","permalink":"/blog/tags/h-2-database"},{"inline":true,"label":"RestApi","permalink":"/blog/tags/rest-api"},{"inline":true,"label":"web-development","permalink":"/blog/tags/web-development"},{"inline":true,"label":"CRUD-operations","permalink":"/blog/tags/crud-operations"},{"inline":true,"label":"lombok","permalink":"/blog/tags/lombok"}],"readingTime":8.08,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"setting-up-a-java-spring-boot-project-part-2","title":"Java Spring Boot Project - Part 2","description":"In this blog post, we use lombok to create the Book Entity class. We will then create a repository, service and controller class to perform CRUD operations on the Book Entity.","authors":"shahpreetk","tags":["java","springboot","intellij","gradle","h2-database","RestApi","web-development","CRUD-operations","lombok"]},"unlisted":false,"prevItem":{"title":"Java Spring Boot Project - Part 3","permalink":"/blog/setting-up-a-java-spring-boot-project-part-3"},"nextItem":{"title":"Java Spring Boot Project - Part 1","permalink":"/blog/setting-up-a-java-spring-boot-project-part-1"}},"content":"In the previous blog post, we covered the initial setup of a Book Library Project using Java Spring Boot. In this blog post, we will use Lombok to simplify the creation of the Book Entity class. We will then create a repository, service, and controller class to perform CRUD operations on the Book Entity.\n\n## Using Lombok for the Book Entity\n\nLombok is a library that helps reduce boilerplate code in Java classes by providing annotations to generate getters, setters, constructors, and other common methods automatically. In this blog post, we will leverage Lombok to simplify the creation of the Book Entity class in our Java Spring Boot project.\n\n<!-- truncate -->\n\n- **Step 1: Add Lombok Dependency**\n\n  To use Lombok in your project, you need to add the Lombok dependency to your `build.gradle` file. You can copy the latest version from the [Maven Central Repository](https://mvnrepository.com/artifact/org.projectlombok/lombok) or add the following line in the `dependencies` block:\n\n  ```groovy\n  compileOnly 'org.projectlombok:lombok:1.18.32'\n  ```\n\n  After adding the dependency, sync your Gradle project to download the Lombok library.\n\n  | ![Sync Gradle project after adding Lombok](./sync-gradle-project.png) |\n  | --------------------------------------------------------------------- |\n\n- **Step 2: Create the Book Entity Class**\n\n  The Lombok `@Getter` and `@Setter` annotations automatically generate getter and setter methods for the fields in a Java class. `@Getter` creates a public method to retrieve the value of a field, while `@Setter` creates a public method to set the value of a field. This reduces boilerplate code, making the class definitions cleaner and easier to read.\n\n  We will use these annotations to create the `Book` entity class. Open the `Book.java` file and add the following code:\n\n  | ![Book Class using Lombok](./book-class-with-lombok.png) |\n  | -------------------------------------------------------- |\n\n### Get All Books\n\n- **Step 3: Create the Book Repository**\n\n  Next, we will create a repository interface to interact with the `Book` entity. Create a new interface named `BookLibraryRepository` in the package and extend it with the `JpaRepository` interface provided by Spring Data JPA:\n\n  | ![Book Library Repository](./book-repository.png) |\n  | ------------------------------------------------- |\n\n- **Step 4: Create the Book Service**\n\n  Now, we will create a service class to handle business logic related to the `Book` entity. Create a new class named `BookLibraryService` in the `service` package and annotate it with `@Service`:\n\n  | ![Book Library Service](./book-service.png) |\n  | ------------------------------------------- |\n\n- **Step 5: Create the Book Controller**\n\n  Finally, we will create a controller class to expose RESTful endpoints for CRUD operations on the `Book` entity. Create a new class named `BookLibraryController` in the `controller` package and annotate it with `@RestController`:\n\n  | ![Book Library Controller](./book-controller.png) |\n  | ------------------------------------------------- |\n\n- **Step 6: Start the server and test the API in the browser**\n\n  Run the project and navigate to `http://localhost:8080/api/books` in your browser.\n  You will see an empty ouput:\n\n  | ![No Output](./no-output.png) |\n  | ----------------------------- |\n\n  Even though we have data in our H2 database, the browser shows an array with multiple empty objects. This is because the `BookLibraryRepository` is not mapping the data from the database to the JSON we are trying to return.\n\n  I tried multiple StackOverflow solutions, such as adding a Lombok Plugin or the `jackson-databind dependency`, but none worked because the plugin doesn't help at runtime and the `jackson-databind` dependency was already present in the project as a default part of the `spring-boot-starter-web` dependency.\n\n- **Step 7: Solution to the JSON issue**\n\n  The solution was to add the `Lombok dependency` to the `build.gradle` file as a `annotationProcessor` along with the `compileOnly`. This is because the `annotationProcessor` scope is used to process annotations at compile time, necessary for Lombok to generate the necessary methods in the compiled class files. Sync the Gradle project after adding the `annotationProcessor` scope.\n\n  The `compileOnly` part of the dependency is needed to compile the project, without which the import statements for the Lombok annotations would not be recognized by the compiler.\n\n  :::note\n\n  - Please install the Lombok Plugin from the IntelliJ IDEA marketplace (`Settings` -> `Plugins` ) to enable the IDE to recognize the Lombok annotations.\n  - Then go into the `Settings` -> `Build, Execution, Deployment` -> `Compiler` -> `Annotation Processors` and check the box for `Enable annotation processing`.\n    :::\n\n  | ![Updated build.gradle file](./updated-gradle.png) |\n  | -------------------------------------------------- |\n\n  Run the project again and navigate to `http://localhost:8080/api/books` in your browser. You should now see the list of books displayed correctly in JSON format.\n\n  | ![JSON Output with Lombok](./json-output.png) |\n  | --------------------------------------------- |\n\n- **Step 8: Testing the GET API using Hoppscotch.io**\n\n  In the past, I used Postman to test the API, but now it requires users to create an account.I recently discovered [Hoppscotch.io](https://hoppscotch.io/), a free and open-source, lightweight, web-based API development suite. You can use it to test the GET API by entering the URL `http://localhost:8080/api/books` and clicking on the `Send` button.\n\n  Since our app runs on `http`, Hoppscotch.io will throw an error. To solve this, you can use the Hoppscotch browser extension. It can be downloaded from the following links:\n\n  [Hoppscotch Chrome Extension](https://chromewebstore.google.com/detail/hoppscotch-browser-extens/amknoiejhlmhancpahfcfcfhllgkpbld)\n\n  [Hoppscotch Firefox Extension](https://addons.mozilla.org/en-US/firefox/addon/hoppscotch/)\n\n  Once you have the extension installed, reload the page and re-send the request. Then choose the **Browser extension option** from the error and click on the `Send` button. You should see the list of books displayed in JSON format.\n\n  | ![GET Request on Hoppscotch.io](./get-hoppscotch.png) |\n  | ----------------------------------------------------- |\n\n## CRUD Operations on the Book Entity\n\nIn the above section, we saw how to GET all the books from the database. Now, let's implement the remaining CRUD operations on the `Book` entity.\n\n### Create a New Book\n\nTo create a new book, we need to implement a `POST` API that accepts a JSON payload containing the book details. Add the following method to the `BookLibraryController` class:\n\n```java\n// In BookLibraryController.java\n  @PostMapping\n  @ResponseStatus(HttpStatus.CREATED)\n  public Book addBook(@RequestBody Book book) {\n      return bookLibraryService.addBook(book);\n  }\n```\n\nWe now create the Service method which will make the repository call to save the book.\n\n```java\n// In BookLibraryService.java\n  public Book addBook(Book book) {\n      return bookLibraryRepository.save(book);\n  }\n```\n\n| ![POST Request Error on Hoppscotch.io](./post-hoppscotch-error.png) |\n| ------------------------------------------------------------------- |\n\nWhen you try to send a POST request you will encounter the following `SqlExceptionHelper` error.\n\n```sh\n  2024-06-01T17:33:42.470+01:00 ERROR 68886 --- [javaSpringBootBookLibrary] [nio-8080-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : Unique index or primary key violation: \"PRIMARY KEY ON PUBLIC.BOOK(ID) ( /* key:1 */ 1, 'Harper Lee', 'A gripping novel about racial injustice.', 'To Kill a Mockingbird')\"; SQL statement:\ninsert into book (author,description,name,id) values (?,?,?,default) [23505-224]\n```\n\nThis error occurs because even though we are asking the database to auto-generate the `id`, the `id` field in the `Book` class, we are filling it with a value in the `data.sql` file. This causes a conflict when we try to insert a new book. To resolve this, remove the `id` field from the `data.sql` file.\n\n```sql\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('To Kill a Mockingbird', 'Harper Lee', 'A gripping novel about racial injustice.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('Pride and Prejudice', 'Jane Austen', 'A classic romance novel.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('The Great Gatsby', 'F. Scott Fitzgerald', 'A story of the American dream gone wrong.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('Moby Dick', 'Herman Melville', 'A thrilling adventure of the whaling industry.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('The Catcher in the Rye', 'J.D. Salinger', 'A novel about teenage rebellion.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('The Hobbit', 'J.R.R. Tolkien', 'A fantasy adventure of a reluctant hero.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('Crime and Punishment', 'Fyodor Dostoevsky', 'A psychological drama about guilt and redemption.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('The Odyssey', 'Homer', 'An ancient epic of a hero''s journey home.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('The Adventures of Sherlock Holmes', 'Arthur Conan Doyle', 'Mysteries solved by the famous detective.');\nINSERT INTO BOOK (NAME, AUTHOR, DESCRIPTION) VALUES ('Harry Potter and the Philosopher''s Stone', 'J.K. Rowling', 'The beginning of a young wizard''s journey.');\n```\n\nRe-run your app and re-send the POST request on Hoppscotch.io. You should see a success message with the newly created book details.\n\n| ![POST Request Success on Hoppscotch.io](./post-hoppscotch-success.png) |\n| ----------------------------------------------------------------------- |\n\n### Update an Existing Book\n\nTo update an existing book, we need to implement a `PUT` API that accepts the book `id` and the updated book details. Add the following method to the `BookLibraryController` class:\n\n```java\n// In BookLibraryController.java\n  @PutMapping(value = \"/{id}\")\n  public ResponseEntity<Book> updateBook(@PathVariable int id, @RequestBody Book updatedBook) {\n      Book updated = bookLibraryService.updateBook(id, updatedBook);\n      return new ResponseEntity<>(updated, HttpStatus.OK);\n  }\n```\n\nWe now create the Service method which will make the repository call to update the book.\n\n```java\n// In BookLibraryService.java\n  public Book updateBook(int id, Book updatedBook) {\n      if (updatedBook.getId() != id) {\n          throw new RuntimeException(\"The ID in the request body does not match the ID in the URL.\");\n      }\n      Optional<Book> optionalBook = bookLibraryRepository.findById(id);\n      if (optionalBook.isPresent()) {\n          Book existingBook = optionalBook.get();\n          existingBook.setName(updatedBook.getName());\n          existingBook.setAuthor(updatedBook.getAuthor());\n          existingBook.setDescription(updatedBook.getDescription());\n          return bookLibraryRepository.save(existingBook);\n      } else {\n          throw new RuntimeException(String.format(\"Book with id {%s} not found\", id));\n      }\n  }\n```\n\n| ![PUT Request on Hoppscotch.io](./put-hoppscotch.png) |\n| ----------------------------------------------------- |\n\n### Delete a Book\n\nTo delete a book, we need to implement a `DELETE` API that accepts the book `id`. Add the following method to the `BookLibraryController` class:\n\n```java\n// In BookLibraryController.java\n  @DeleteMapping(value = \"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void deleteBook(@PathVariable int id) {\n      bookLibraryService.deleteBook(id);\n  }\n```\n\nWe now create the Service method which will make the repository call to delete the book.\n\n```java\n// In BookLibraryService.java\n  public void deleteBook(int id) {\n      bookLibraryRepository.deleteById(id);\n  }\n```\n\n| ![DELETE Request on Hoppscotch.io](./delete-hoppscotch.png) |\n| ----------------------------------------------------------- |\n\nWith that, we have successfully implemented the CRUD operations on the `Book` entity in our Java Spring Boot project.\n\n:::info\nPart 3 of this series will cover the testing of the CRUD operations using JUnit and Mockito. We will also create API documentation using [Swagger](https://swagger.io/) and update our codebase with exception handling.\n:::"},{"id":"setting-up-a-java-spring-boot-project-part-1","metadata":{"permalink":"/blog/setting-up-a-java-spring-boot-project-part-1","source":"@site/blog/2024-05-19/2024-05-19-setting-up-a-java-spring-boot-project-part-1.md","title":"Java Spring Boot Project - Part 1","description":"In this blog post, we guide you through the initial setup of a Java Spring Boot project using Gradle and IntelliJ IDEA. We cover creating a new project with Spring Initializr, setting up dependencies, and configuring an in-memory H2 database.","date":"2024-05-19T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"intellij","permalink":"/blog/tags/intellij"},{"inline":true,"label":"gradle","permalink":"/blog/tags/gradle"},{"inline":true,"label":"h2-database","permalink":"/blog/tags/h-2-database"},{"inline":true,"label":"RestApi","permalink":"/blog/tags/rest-api"},{"inline":true,"label":"web-development","permalink":"/blog/tags/web-development"}],"readingTime":5.18,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"setting-up-a-java-spring-boot-project-part-1","title":"Java Spring Boot Project - Part 1","description":"In this blog post, we guide you through the initial setup of a Java Spring Boot project using Gradle and IntelliJ IDEA. We cover creating a new project with Spring Initializr, setting up dependencies, and configuring an in-memory H2 database.","authors":"shahpreetk","tags":["java","springboot","intellij","gradle","h2-database","RestApi","web-development"]},"unlisted":false,"prevItem":{"title":"Java Spring Boot Project - Part 2","permalink":"/blog/setting-up-a-java-spring-boot-project-part-2"},"nextItem":{"title":"Multithreading in Java","permalink":"/blog/multithreading-in-java"}},"content":"## Initial Setup for a Java Spring Boot Project\n\nIn this blog post, we will cover the initial steps to set up a Java Spring Boot project using Gradle and IntelliJ IDEA. Spring Boot is a popular framework for building Java applications, providing a robust and efficient platform for developing web applications, RESTful APIs, and microservices.\n\n<!-- truncate -->\n\n- It is not possible to directly create a new Spring Boot application in **IntelliJ IDEA Community Edition**. However, you can create a new Spring Boot project using the [Spring Initializr](https://start.spring.io/) website and then import it into IntelliJ IDEA.\n\n| ![Demo project init](./demo-init.png) |\n| ------------------------------------- |\n\n- Add the following dependencies as shown in the image below:\n\n  - **Spring Web:** Provides tools and features to build web applications, including RESTful APIs, using Spring MVC.\n\n  - **Spring Data JDBC:** Simplifies database access by providing a simple, lightweight approach to using JDBC with Spring, focusing on SQL queries.\n\n  - **Spring Data JPA:** Eases database access by providing a repository abstraction layer on top of JPA (Java Persistence API) to simplify CRUD operations and data access patterns.\n\n  - **H2 Database:** A fast, lightweight, in-memory relational database management system that is commonly used for development and testing purposes.\n\n  - **MySQL Driver:** Enables Java applications to connect to and interact with MySQL databases by providing the necessary JDBC (Java Database Connectivity) implementation.\n\n| ![Demo dependencies](./demo-dependencies.png) |\n| --------------------------------------------- |\n\n- After adding the dependencies, click on the `Generate` button to download the project as a zip file.\n\n- Extract the downloaded zip file and open the project in IntelliJ IDEA.\n\n- Run the DemoApplication file to start the project. By default, the project will run on port 8080.\n\n| ![Demo project run](./demo-run.png) |\n| ----------------------------------- |\n\n- In the folder containing the `DemoApplication` file, create a new class named `HelloWorld`.\n  - Annotate the `HelloWorld` class as a `@RestController` from the `org.springframework.web.bind.annotation` package.\n  - In the `HelloWorld` class, create a method named `helloWorld` that returns a `String \"Hello World\"`.\n  - Annotate the method with `@GetMapping` and provide the path as `\"/hello\"`.\n\n:::note\nAn annotation in Java is a form of metadata that provides additional information about the program's code elements, such as classes, methods, or variables, and can be used to influence program behavior at runtime or compile time.\n:::\n\n| ![Hello World Code](./hello-world-code.png) |\n| ------------------------------------------- |\n\n- Run the project and navigate to `http://localhost:8080/hello` in your browser. You should see the message \"Hello World\" displayed on the screen.\n\n| ![Hello World](./hello-world-web.png) |\n| ------------------------------------- |\n\n## Setup of a Book Library Project\n\nIn this section, we will set up a Book Library project created with Java Spring Boot and Gradle, allowing us to perform CRUD operations on a collection of books. We will use an in-memory H2 database to store the book data.\n\n- First, create a new project for the book library using [Spring Initializr](https://start.spring.io/) with the following dependencies:\n  - Spring Web\n  - Spring Data JDBC\n  - Spring Data JPA\n  - H2 Database\n  - MySQL Driver\n\n| ![Book Library project init](./book-library-init.png) |\n| ----------------------------------------------------- |\n\n- Generate and extract the project, then open it in IntelliJ IDEA.\n\n- In the `src/main/resources/application.properties` file, add the following configuration to use the H2 in-memory database:\n\n```properties\nspring.application.name=javaSpringBootBookLibrary\n\n# H2 in-memory database. It can also be a file path.\nspring.datasource.url=jdbc:h2:mem:testdb\n\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n\n# Defer the datasource initialization\nspring.jpa.defer-datasource-initialization=true\n\n# Always run the SQL scripts\nspring.sql.init.mode=always\n\n# Create and drop the tables on startup\nspring.jpa.hibernate.ddl-auto=create-drop\n\n# Enable H2 console\nspring.h2.console.enabled=true\n```\n\n- Create the `Book` class to represent a book entity in the library. The `Book` class will have the following fields:\n\n  - `id` of type `int`. Annotation `@Id` and `@GeneratedValue` to auto-generate the id.\n  - `name` of type `String`\n  - `author` of type `String`\n  - `description` of type `String`\n\n- Annotate the `Book` class with `@Entity` and `@NoArgsConstructor` to map it to the database table.\n\n- Generate the getters and setters for the fields using the `Generate` option in IntelliJ IDEA.\n\n| ![Book Class with Getters and Setters](./book-class-with-getters-setters.png) |\n| ----------------------------------------------------------------------------- |\n\n- In the `src/main/resources` folder, create a new file named `data.sql` to insert some sample data into the `book` table. Add the following SQL script to insert books into the table:\n\n```sql\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (1, 'To Kill a Mockingbird', 'Harper Lee', 'A gripping novel about racial injustice.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (2, 'Pride and Prejudice', 'Jane Austen', 'A classic romance novel.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (3, 'The Great Gatsby', 'F. Scott Fitzgerald', 'A story of the American dream gone wrong.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (4, 'Moby Dick', 'Herman Melville', 'A thrilling adventure of the whaling industry.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (5, 'The Catcher in the Rye', 'J.D. Salinger', 'A novel about teenage rebellion.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (6, 'The Hobbit', 'J.R.R. Tolkien', 'A fantasy adventure of a reluctant hero.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (7, 'Crime and Punishment', 'Fyodor Dostoevsky', 'A psychological drama about guilt and redemption.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (8, 'The Odyssey', 'Homer', 'An ancient epic of a hero''s journey home.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (9, 'The Adventures of Sherlock Holmes', 'Arthur Conan Doyle', 'Mysteries solved by the famous detective.');\nINSERT INTO BOOK (ID, NAME, AUTHOR, DESCRIPTION) VALUES (10, 'Harry Potter and the Philosopher''s Stone', 'J.K. Rowling', 'The beginning of a young wizard''s journey.');\n```\n\n| ![SQL inserts](./sql-inserts.png) |\n| --------------------------------- |\n\n:::tip\nIf your SQL string has a apostrophe(‘), you need to escape it by adding two apostrophes(‘’). Check descriptions of book ID 8 and 10.\n:::\n\n- Run the project, and the H2 console can be accessed at `http://localhost:8080/h2-console`. The JDBC URL should be `jdbc:h2:mem:testdb`, and the username and password should be `sa` and `password` respectively.\n\n| ![H2 console](./h2-console.png) |\n| ------------------------------- |\n\n| ![H2 SELECT ALL BOOKS](./h2-all-books.png) |\n| ------------------------------------------ |\n\n:::info\nPart 2 of this blog post will use Lombok for the Book Entity and will cover the creation of the Book Repository, Service, and Controller classes to perform CRUD operations on the Book Entity.\n:::"},{"id":"multithreading-in-java","metadata":{"permalink":"/blog/multithreading-in-java","source":"@site/blog/2024-03-06/2024-03-06-multithreading-java.md","title":"Multithreading in Java","description":"Multithreading and Concurrency in Java are essential concepts for building scalable and responsive applications. This guide covers the basics of multithreading in Java.","date":"2024-03-06T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"multithreading","permalink":"/blog/tags/multithreading"},{"inline":true,"label":"race-condition","permalink":"/blog/tags/race-condition"},{"inline":true,"label":"concurrency","permalink":"/blog/tags/concurrency"},{"inline":true,"label":"lock","permalink":"/blog/tags/lock"},{"inline":true,"label":"semaphore","permalink":"/blog/tags/semaphore"},{"inline":true,"label":"monitor","permalink":"/blog/tags/monitor"},{"inline":true,"label":"synchronization","permalink":"/blog/tags/synchronization"}],"readingTime":3.845,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"multithreading-in-java","title":"Multithreading in Java","description":"Multithreading and Concurrency in Java are essential concepts for building scalable and responsive applications. This guide covers the basics of multithreading in Java.","authors":"shahpreetk","tags":["java","multithreading","race-condition","concurrency","lock","semaphore","monitor","synchronization"]},"unlisted":false,"prevItem":{"title":"Java Spring Boot Project - Part 1","permalink":"/blog/setting-up-a-java-spring-boot-project-part-1"},"nextItem":{"title":"Garbage Collector in Java","permalink":"/blog/garbage-collector-in-java"}},"content":"## Introduction to Multithreading\n\nMulti-threading in Java enables a single process to manage multiple threads concurrently, allowing tasks to be executed in parallel. This is achieved through the Thread class or the Runnable interface, empowering developers to create and oversee threads for parallel task execution.\n\n<!-- truncate -->\n\n### Thread Class Example\n\n```js\nclass MyThread extends Thread {\n    public void run() {\n        // Task to be performed concurrently\n        System.out.println(\"Thread running...\"); // Printing a message indicating that the thread is running\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyThread thread1 = new MyThread(); // Creating an instance of MyThread\n        MyThread thread2 = new MyThread(); // Creating another instance of MyThread\n\n        // Starting threads\n        thread1.start(); // Starting the first thread\n        thread2.start(); // Starting the second thread\n    }\n}\n```\n\n## Race Condition\n\nHowever, multi-threading can introduce race conditions, where program behavior depends on the timing of events, such as the order in which threads execute instructions. This unpredictability may lead to unexpected outcomes as threads concurrently access and modify shared resources, risking data corruption and program state inconsistencies.\n\n### Race Condition Example\n\n```js\nclass Counter {\n    private int count = 0; // Initializing the counter\n\n    // Method to increment the counter\n    public void increment() {\n        /**\n         * Since this method is accessed by multiple threads (thread1 and thread2), there is a possibility that both threads may execute this line concurrently.\n         * If both threads execute count++ at the same time, it can lead to a race condition where the final value of count may not be the expected result.\n         * This is because both threads are reading the current value of count, incrementing it, and then writing the updated value back to count.\n         * If these operations are not synchronized, the final result may be inconsistent due to interleaving of operations from different threads.\n        */\n        count++; // This operation leads to race condition\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter(); // Creating an instance of Counter\n\n        // Creating multiple threads to increment the counter\n        Thread thread1 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                counter.increment(); // Incrementing the counter\n            }\n        });\n\n        Thread thread2 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                counter.increment(); // Incrementing the counter\n            }\n        });\n\n        // Starting the threads\n        thread1.start(); // Starting the first thread\n        thread2.start(); // Starting the second thread\n\n        // Waiting for threads to complete\n        try {\n            thread1.join(); // Waiting for the first thread to complete\n            thread2.join(); // Waiting for the second thread to complete\n        } catch (InterruptedException e) {\n            e.printStackTrace(); // Handling InterruptedException\n        }\n\n        // Displaying the final count\n        System.out.println(\"Final count: \" + counter.getCount()); // Printing the final count\n    }\n}\n```\n\n## Mitigating Race Conditions\n\nTo mitigate race conditions in Java, synchronization mechanisms like locks, semaphores, and monitors are utilized. These mechanisms control access to shared resources, ensuring that only one thread can access and modify the resource at a time. By preventing simultaneous access and modification of shared resources, these measures diminish the likelihood of data corruption and enhance program reliability.\n\n### Lock Example\n\n```js\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\nclass Counter {\n    private int count = 0; // Initializing the counter\n\n    // Creating a lock for synchronization\n    private Lock lock = new ReentrantLock(); // Creating a lock\n\n    // Method to increment the counter using a lock\n    public void increment() {\n        lock.lock(); // Acquiring the lock\n        try {\n            count++; // Incrementing the counter\n        } finally {\n            lock.unlock(); // Releasing the lock\n        }\n    }\n\n    // Method to get the current value of the counter\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter(); // Creating an instance of Counter\n\n        // Creating multiple threads to increment the counter\n        Thread thread1 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                counter.increment(); // Incrementing the counter\n            }\n        });\n\n        Thread thread2 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                counter.increment(); // Incrementing the counter\n            }\n        });\n\n        // Starting the threads\n        thread1.start();\n        thread2.start();\n\n        // Waiting for threads to complete\n        try {\n            thread1.join();\n            thread2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Displaying the final count\n        System.out.println(\"Final count: \" + counter.getCount());\n    }\n}\n```\n\n## Conclusion\n\nMultithreading and concurrency are crucial in Java for creating scalable and responsive apps. However, dealing with issues like race conditions requires careful attention. By using synchronization mechanisms, developers can handle these challenges and ensure their multithreaded apps run smoothly."},{"id":"garbage-collector-in-java","metadata":{"permalink":"/blog/garbage-collector-in-java","source":"@site/blog/2024-03-06/2024-03-04-garbage-collector-java.md","title":"Garbage Collector in Java","description":"Garbage Collection in Java is the process of reclaiming the runtime unused memory automatically. In this blog, we will learn about the Garbage Collector in Java.","date":"2024-03-04T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"garbage-collector","permalink":"/blog/tags/garbage-collector"},{"inline":true,"label":"memory-management","permalink":"/blog/tags/memory-management"}],"readingTime":3.925,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"garbage-collector-in-java","title":"Garbage Collector in Java","description":"Garbage Collection in Java is the process of reclaiming the runtime unused memory automatically. In this blog, we will learn about the Garbage Collector in Java.","authors":"shahpreetk","tags":["java","garbage-collector","memory-management"]},"unlisted":false,"prevItem":{"title":"Multithreading in Java","permalink":"/blog/multithreading-in-java"},"nextItem":{"title":"Access Modifiers in Java","permalink":"/blog/access-modifiers-in-java"}},"content":"## Introduction to Garbage Collection\n\nIn languages like C/C++, managing memory manually is a crucial task for programmers. Forgetting to deallocate memory can lead to memory leaks and program crashes due to insufficient memory. However, Java provides an automatic memory management system known as the Garbage Collector (GC), which handles memory deallocation for you.\n\n<!-- truncate -->\n\nThe garbage collection process operates within the JVM. Its job is to clean up heap memory by getting rid of objects that are no longer needed/referenced.\n\n:::note\nA referenced object is one that some part of your program still points to, while an unreferenced object is not pointed to by any part of your program.\n:::\n\nTherefore, memory occupied by an unreferenced object can be reclaimed. Programmers don't have to specify objects for deletion explicitly.\n\n## How to invoke the garbage collector?\n\nYou can request the JVM to run the garbage collector using - `System.gc()` or `Runtime.getRuntime().gc()`. However, it's not guaranteed that the garbage collector will run immediately after calling these methods. The garbage collector runs when the JVM thinks it's necessary.\nBefore an object is destroyed, the Garbage Collector triggers the `finalize()` method for cleanup. Once done, the Garbage Collector disposes of the object.\n\n### The `finalize()` method\n\nThe `finalize()` method, found in the Object class, can be overridden for custom cleanup tasks like closing database connections. Although called by the Garbage Collector, it's part of the JVM. It's advised to override `finalize()` for resource disposal since the default implementation is empty. `finalize()` is only invoked once per object and ignores uncaught exceptions during execution.\n\n## How does the Garbage Collector work?\n\nHere's a simplified overview of how Java garbage collection works:\n\n- <u>**Memory Allocation**</u>: When you create objects in Java using the new keyword, memory is allocated for those objects on the heap. The heap is the region of memory where Java objects are stored.\n\n- <u>**Marking Phase**</u>: Java garbage collection uses a process called _mark and sweep_. During the marking phase, the garbage collector identifies which objects in the heap are still reachable, starting from the root objects (e.g., objects referenced by active threads, static variables, and local variables on the stack) and recursively marking all objects that are reachable from them. **Any objects not marked as reachable are considered garbage.**\n\n- <u>**Sweeping Phase**</u>: In the sweeping phase, the garbage collector removes (sweeps) the memory occupied by the unreferenced objects, effectively reclaiming it for future use. This reclaimed memory becomes available for allocating new objects.\n\n- <u>**Compacting (Optional)**</u>: Some garbage collectors, such as the G1 Garbage Collector, may perform an optional compaction phase after marking and sweeping. Compaction rearranges the memory to reduce fragmentation, which can improve memory allocation efficiency and reduce memory usage.\n\n- <u>**Finalization**</u>: Before an object is reclaimed by the Garbage Collector, it invokes the `finalize()` method if it's overridden. This method allows for any necessary cleanup operations to be performed. Once the `finalize()` method completes, the Garbage Collector proceeds to dispose of the object.\n\n## Types of Garbage Collectors\n\nThere are several types of garbage collectors in Java, each designed to handle memory management differently. Here are some common types:\n\n- **Serial Garbage Collector:**\n\n  - Uses a single thread for garbage collection.\n  - Suitable for applications with smaller heaps or those that prioritize low CPU usage.\n  - Freezes the application thread during garbage collection.\n\n- **Parallel Garbage Collector** (also known as the _Throughput Collector_):\n\n  - Utilizes multiple threads to perform garbage collection tasks in parallel.\n  - Significantly reduce pause times for large-scale applications.\n  - Freezes the application thread during garbage collection, but it utilizes multiple threads to reduce the duration of the pause.\n\n- **CMS (Concurrent Mark-Sweep) Garbage Collector:**\n\n  - Aims to minimize pause times by running most of its operations concurrently with the application threads.\n  - Suitable for applications where low latency is critical.\n  - May still freeze the application briefly during certain phases.\n\n- **G1 (Garbage-First) Garbage Collector:**\n\n  - Engineered to achieve low pause times and high throughput, it divides the heap into smaller regions and prioritizes garbage collection on those regions with the most garbage, all while running concurrently with the application threads.\n  - May still pause the application briefly during mixed garbage collection phases.\n\n- **Z Garbage Collector (ZGC):**\n  - Introduced in Java 11.\n  - Scalable garbage collector designed for large heaps and low-latency applications.\n  - Operates concurrently to the application threads.\n  - Aims to minimize pause times without freezing the application thread for extended periods.\n\n## Conclusion\n\nUnderstanding Java's Garbage Collector is essential for Java developers to write efficient and reliable applications. With its automatic memory management capabilities, Java simplifies memory management and reduces the risk of memory-related issues.\n\n#### References\n\n- [Garbage Collection in Java](https://www.geeksforgeeks.org/garbage-collection-java/)"},{"id":"access-modifiers-in-java","metadata":{"permalink":"/blog/access-modifiers-in-java","source":"@site/blog/2024-03-06/2024-03-03-access-modifiers-java.md","title":"Access Modifiers in Java","description":"Access Modifiers in Java are used to define the scope of classes, constructors, variables, and methods. Learn about public, private, protected, and default access modifiers in Java.","date":"2024-03-03T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"access-modifiers","permalink":"/blog/tags/access-modifiers"},{"inline":true,"label":"public","permalink":"/blog/tags/public"},{"inline":true,"label":"protected","permalink":"/blog/tags/protected"},{"inline":true,"label":"default","permalink":"/blog/tags/default"},{"inline":true,"label":"private","permalink":"/blog/tags/private"}],"readingTime":3.16,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"access-modifiers-in-java","title":"Access Modifiers in Java","description":"Access Modifiers in Java are used to define the scope of classes, constructors, variables, and methods. Learn about public, private, protected, and default access modifiers in Java.","authors":"shahpreetk","tags":["java","access-modifiers","public","protected","default","private"]},"unlisted":false,"prevItem":{"title":"Garbage Collector in Java","permalink":"/blog/garbage-collector-in-java"},"nextItem":{"title":"Data Types in Java","permalink":"/blog/data-types-in-java"}},"content":"## Introduction to Access Modifiers\n\nJava access modifiers are fundamental to Java's object-oriented nature, providing various levels of encapsulation by controlling access to classes, fields, methods, and constructors. Understanding these is crucial for designing secure, well-structured, and maintainable Java applications. Here's a more detailed dive into each of the Java access modifiers:\n\n<!-- truncate -->\n\n### No Modifier (Default Access)\n\n- **Scope**: Accessible within the same package only.\n- **Usage Context**: Used when you want to share data or methods among classes that are bundled together in the same package, without exposing them to the entire universe of your application.\n- **Example**: If you have a class DefaultClass with default access in a package `com.example`, this class can be accessed by any other class within `com.example` but not outside of it.\n\n```java\nclass DefaultClass {\n    int defaultVariable;\n    void defaultMethod() {\n        // Code...\n    }\n}\n```\n\n### Private\n\n- **Scope**: Accessible within the class only.\n- **Usage Context**: Typically used for utility methods or variables that are only meant to be used internally by the enclosing class. It's a way to hide the internal details and mechanics of a class.\n- **Example**: Private member variables in a class are often used in conjunction with public `getter` and `setter` methods to provide controlled access (encapsulation).\n\n```java\nclass PrivateClass {\n    private int privateVariable;\n    private void privateMethod() {\n        // Code...\n    }\n\n    public int getPrivateVariable() {\n        return privateVariable;\n    }\n\n    public void setPrivateVariable(int privateVariable) {\n        this.privateVariable = privateVariable;\n    }\n}\n```\n\n### Protected\n\n- **Scope**: Accessible within the same package and by subclasses (even if they are located in different packages).\n- **Usage Context**: Used when you want to hide a class, method, or field from other code except for subclasses, which might need to use or override the protected members.\n- **Example**: In a class hierarchy, if a method in the superclass is marked as protected, then only subclasses (and other classes in the same package) can access it.\n\n```java\nclass ProtectedClass {\n    protected int protectedVariable;\n    protected void protectedMethod() {\n        // Code...\n    }\n}\n\n@override\nclass SubClass extends ProtectedClass {\n    void subClassMethod() {\n        protectedMethod(); // Accessible\n    }\n}\n\n```\n\n### Public\n\n- **Scope**: Accessible from any other class.\n- **Usage Context**: Used when you need to provide a broad access level. Typically, public access is used for API definitions, where you want to expose functionalities to the outside world.\n- **Example**: Public methods or constants which are intended to be used by any other classes.\n\n```java\npublic class PublicClass {\n    public int publicVariable;\n    public void publicMethod() {\n        // Code...\n    }\n}\n```\n\n### Additional Notes\n\n- **Class Level Access**: Note that top-level Java classes (those not inner classes) can only be public or package-private (no access modifier). Inner classes, however, can also be private or protected.\n\n- **Constructors**: Like methods and variables, constructors can also have access modifiers. For instance, a private constructor means that a class cannot be instantiated outside of its own context, a common pattern in singleton classes.\n\n- **Interface Methods**: All methods in an interface are implicitly public, so when you implement an interface, the implementing methods must be declared public.\n\n- **Inheritance and Access Modifiers**: Access levels affect how classes inherit from one another. For example, a subclass cannot narrow the access of a method it inherits (e.g., cannot override a public method with a protected one).\n\n- **Best Practices**: It's considered good practice to make fields private unless there is a good reason not to. This encapsulation principle helps in maintaining the integrity of an object's state. Similarly, always use the least permissive access level necessary for functionality to enhance security and robustness.\n\n## Conclusion\n\nBy using access modifiers sensibly, Java developers can ensure that their classes are used correctly and that internal data remains protected from unintended access and modification."},{"id":"data-types-in-java","metadata":{"permalink":"/blog/data-types-in-java","source":"@site/blog/2024-03-06/2024-03-02-data-types-java.mdx","title":"Data Types in Java","description":"Dive into the different data types in Java, including primitive types, reference types, and wrapper classes.","date":"2024-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"data-types","permalink":"/blog/tags/data-types"},{"inline":true,"label":"primitive-types","permalink":"/blog/tags/primitive-types"},{"inline":true,"label":"reference-types","permalink":"/blog/tags/reference-types"},{"inline":true,"label":"wrapper-classes","permalink":"/blog/tags/wrapper-classes"}],"readingTime":4.58,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"data-types-in-java","title":"Data Types in Java","description":"Dive into the different data types in Java, including primitive types, reference types, and wrapper classes.","authors":"shahpreetk","tags":["java","data-types","primitive-types","reference-types","wrapper-classes"]},"unlisted":false,"prevItem":{"title":"Access Modifiers in Java","permalink":"/blog/access-modifiers-in-java"},"nextItem":{"title":"Java Deep Dive","permalink":"/blog/java-interview-guide"}},"content":"## Introduction to Data Types in Java\n\nData types in Java specify the size, type, and operations of data that can be stored in a variable. In Java, a statically-typed language, every variable must be declared with a data type. The data type of a variable determines how much space it occupies in memory and what kind of operations can be performed on it.\n\n{/* truncate */}\n\nJava categorizes data types into primitive types, reference types, and wrapper classes.\n\n## Primitive Data Types\n\nPrimitive data types are built-in Java types that are not objects; they represent raw values. They include:\n\n1. `byte`: 8-bit signed integer\n2. `short`: 16-bit signed integer\n3. `int`: 32-bit signed integer\n4. `long`: 64-bit signed integer\n5. `float`: 32-bit floating-point number\n6. `double`: 64-bit floating-point number\n7. `char`: 16-bit Unicode character\n8. `boolean`: true or false\n\n```java\nbyte exampleByte = 100;\nshort exampleShort = 5000;\nint exampleInt = 123456;\nlong exampleLong = 12345678910L;\nfloat exampleFloat = 3.14f;\ndouble exampleDouble = 3.14159;\nchar exampleChar = 'A';\nboolean exampleBoolean = true;\n```\n\n## Reference Data Types\n\nReference data types refer to objects and hence they are stored by reference. Examples include:\n\n- Basic Reference Types:\n\n  1. `class`: Holds a reference to a class.\n  2. `interface`: A reference to an implemented interface.\n  3. `enum`: A special data type that enables for variables to be a set of predefined constants.\n  4. `lambda`: A reference to a lambda expression.\n  5. `String`: A reference to a string.\n  6. `Runnable`: A reference to a runnable object.\n  7. `Record`: A reference to a record.\n\n```js\n  // Class\n  class ExampleClass {\n      // Code...\n  }\n\n  // Interface\n  interface ExampleInterface {\n      // Code...\n  }\n\n  // Enum\n  enum Size {SMALL, MEDIUM, LARGE}\n  Size exampleSize = Size.MEDIUM;\n\n  // Lambda\n  Runnable exampleRunnable = () -> System.out.println(\"Running\");\n\n  // Lambda with parameters\n  Comparator<Integer> exampleComparator = (a, b) -> a - b;\n\n  // Lambda with return statement\n  Function<Integer, Integer> exampleFunction = (a) -> {\n      return a * a;\n  };\n\n  // String\n  String exampleString = \"Hello, World!\";\n\n  // Runnable\n  Runnable exampleRunnable = () -> {\n      // Code...\n  };\n\n  // Record\n  record ExampleRecord(int id, String name) {\n      // Code...\n  }\n```\n\n- Collections and Iterators:\n\n  1. `array`: A reference to a dynamically allocated array.\n  2. `List`: A reference to a dynamically sized collection of elements.\n  3. `Map`: A reference to a collection of key-value pairs.\n  4. `Set`: A reference to a collection that contains no duplicate elements.\n  5. `Iterator`: A reference to an object that enables traversal through a collection.\n\n```js\n  // array\n  int[] exampleArray = new int[5];\n\n  // List\n  List<String> exampleList = new ArrayList<>();\n\n  // Map\n  Map<String, Integer> exampleMap = new HashMap<>();\n\n  // Set\n  Set<String> exampleSet = new HashSet<>();\n\n  // Iterator\n  Iterator<String> exampleIterator = exampleList.iterator();\n```\n\n- Concurrency and IO:\n\n  1. `Thread`: A reference to a thread of execution.\n  2. `Exception`: A reference to an exception object.\n  3. `Annotation`: A reference to an annotation.\n  4. `Socket`: A reference to a network communication endpoint.\n  5. `File`: A reference to a file or directory in the file system.\n  6. `Scanner`: A reference to an object used to parse primitive types and strings from an input stream.\n\n```js\n  // Thread\n  Thread exampleThread = new Thread(() -> {\n      // Code...\n  });\n\n  // Exception\n  try {\n      // Code...\n  } catch (Exception e) {\n      // Code...\n  }\n\n  // Annotation\n  @interface ExampleAnnotation {\n      // Code...\n  }\n\n  // Socket\n  Socket exampleSocket = new Socket(\"localhost\", 8080);\n\n  // File\n  File exampleFile = new File(\"example.txt\");\n\n  // Scanner\n  Scanner exampleScanner = new Scanner(System.in);\n```\n\n## Wrapper Classes\n\nJava also provides a set of wrapper classes that correspond to the primitive data types. These wrapper classes are used to create objects from primitive data types, and to perform operations on primitive data types. The wrapper classes are:\n\n1. `Byte`: Wrapper class for `byte`\n2. `Short`: Wrapper class for `short`\n3. `Integer`: Wrapper class for `int`\n4. `Long`: Wrapper class for `long`\n5. `Float`: Wrapper class for `float`\n\n```java\nByte exampleWrappedByte = 100;\nShort exampleWrappedShort = 5000;\nInteger exampleWrappedInt = 123456;\nLong exampleWrappedLong = 12345678910L;\nFloat exampleWrappedFloat = 3.14f;\nDouble exampleWrappedDouble = 3.14159;\nCharacter exampleWrappedChar = 'A';\nBoolean exampleWrappedBoolean = true;\n```\n\nAutoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. For example, converting an `int` to an `Integer`, a `double` to a `Double`, etc. Similarly, unboxing is the reverse process:\n\n```js\n// Autoboxing\nInteger autoBoxedInt = 10; // int to Integer\n\n// Unboxing\nint unboxedInt = autoBoxedInt; // Integer to int\n```\n\n## Differences Between Primitive and Wrapper Classes\n\n<table>\n\n<thead>\n  <tr>\n    <th>Aspect</th>\n    <th>Primitive Types</th>\n    <th>Wrapper Classes</th>\n  </tr>\n</thead>\n\n<tbody>\n\n<tr>\n  <td>Type</td>\n  <td>Basic data type</td>\n  <td>Class type (Object)</td>\n</tr>\n\n<tr>\n  <td>Storage</td>\n  <td>Stack</td>\n  <td>Heap</td>\n</tr>\n\n<tr>\n  <td>Default Value</td>\n  <td>Has default value (e.g., 0 for int)</td>\n  <td>Null (if not initialized)</td>\n</tr>\n\n<tr>\n  <td>Size</td>\n  <td>Fixed size</td>\n  <td>Larger than primitives due to object overhead</td>\n</tr>\n\n<tr>\n  <td>Speed</td>\n  <td>Fast</td>\n  <td>Slower than primitives due to additional processing</td>\n</tr>\n\n<tr>\n  <td>Utility</td>\n  <td>Limited to basic arithmetic and logical operations</td>\n  <td>Comes with methods for conversion, comparison, etc.</td>\n</tr>\n\n<tr>\n  <td>Usage in Generics</td>\n  <td>Not applicable</td>\n  <td>Can be used with generics and collections</td>\n</tr>\n\n<tr>\n  <td>Nullability</td>\n  <td>Cannot be null</td>\n  <td>Can be null</td>\n</tr>\n\n</tbody>\n\n</table>\n\n## Conclusion\n\nIn this article, we discussed the different data types and access modifiers in Java. We learned about primitive types, reference types, and wrapper classes, and how they differ from each other. We also explored the four access modifiers in Java and their use cases. Understanding these concepts is essential for writing efficient and secure Java code."},{"id":"java-interview-guide","metadata":{"permalink":"/blog/java-interview-guide","source":"@site/blog/2024-03-06/2024-03-01-java-guide.mdx","title":"Java Deep Dive","description":"A guide to prepare for Java interviews","date":"2024-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"data-structures","permalink":"/blog/tags/data-structures"},{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"algorithms","permalink":"/blog/tags/algorithms"},{"inline":true,"label":"garbage-collector","permalink":"/blog/tags/garbage-collector"},{"inline":true,"label":"memory-management","permalink":"/blog/tags/memory-management"},{"inline":true,"label":"multithreading","permalink":"/blog/tags/multithreading"},{"inline":true,"label":"concurrency","permalink":"/blog/tags/concurrency"}],"readingTime":0.255,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"java-interview-guide","title":"Java Deep Dive","description":"A guide to prepare for Java interviews","authors":"shahpreetk","tags":["data-structures","java","algorithms","garbage-collector","memory-management","multithreading","concurrency"]},"unlisted":false,"prevItem":{"title":"Data Types in Java","permalink":"/blog/data-types-in-java"},"nextItem":{"title":"Android Development in 2024","permalink":"/blog/android-development-in-2024"}},"content":"import javaBlogs from \"./javaBlogs.js\";\n\n## Java Interview Guide\n\nThis guide is a collection of resources to prepare for Java interviews.\n\n{/* truncate */}\n\n<table>\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th>Blog Title</th>\n      <th>Blog Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    {javaBlogs.map((blog) => (\n      <tr key={blog.id}>\n        <td>{blog.id}</td>\n        <td>\n          <a href={`\\/blog${blog.link}`}> {blog.blogTitle} </a>\n        </td>\n        <td>{blog.description}</td>\n      </tr>\n    ))}\n  </tbody>\n</table>"},{"id":"android-development-in-2024","metadata":{"permalink":"/blog/android-development-in-2024","source":"@site/blog/2024-02-18-android-development-in-2024.md","title":"Android Development in 2024","description":"Learning Android Development using Java in 2024","date":"2024-02-18T00:00:00.000Z","tags":[{"inline":true,"label":"android","permalink":"/blog/tags/android"},{"inline":true,"label":"app","permalink":"/blog/tags/app"},{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"development","permalink":"/blog/tags/development"}],"readingTime":1.7,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"android-development-in-2024","title":"Android Development in 2024","description":"Learning Android Development using Java in 2024","authors":"shahpreetk","tags":["android","app","java","development"]},"unlisted":false,"prevItem":{"title":"Java Deep Dive","permalink":"/blog/java-interview-guide"},"nextItem":{"title":"Disable CORS policy in Chrome","permalink":"/blog/disable-cors-policy-in-chrome"}},"content":"1. I started learning Android Development with Java through a helpful guide at [https://developer.android.com/codelabs/android-room-with-a-view](https://developer.android.com/codelabs/android-room-with-a-view)\n\n<!-- truncate -->\n\n:::info\nI decided to begin my Android development journey with Java since it's what I'm already familiar with, even though most tutorials nowadays use Kotlin.\n\nTo prepare for the codelab, I checked out some prerequisite materials and stumbled upon the helpful Android Development videos by Meisam Mansourzadeh on [freeCodeCamp.org](https://www.freecodecamp.org/). These tutorials taught me a lot about RecyclerView and Adapters, which are essential for building Android apps.\n\nPart 1: [https://www.youtube.com/watch?v=fis26HvvDII](https://www.youtube.com/watch?v=fis26HvvDII)\n\nPart 2: [https://www.youtube.com/watch?v=RcSHAkpwXAQ](https://www.youtube.com/watch?v=RcSHAkpwXAQ)\n:::\n\n2. The guide had lots of useful links that really helped me grasp the concepts.\n\n3. Installing Android Studio was easy, and its templates made setting up my first project quick, which was great for a beginner like me.\n\n4. I finished the entire guide in one day, which shows how good the instructions were.\n\n5. Coming from using React for frontend, using XML for UI felt a bit odd to me, but I'm going to explore alternative ways to style the UI. I came across Jetpack Compose a lot, which I'm going to check out next.\n\n6. I had a small issue with the app name not showing, maybe because of using a different Android version or template for Java, but my app worked well on the emulator without any major problems.\n\nA demo of the app -\n\n<!-- ![Android Add a Word App](./assets/androidApp.webm) -->\n<video width=\"480\" height=\"480\" controls>\n  <source src=\"/files/androidApp.mp4\" type=\"video/mp4\"/>\n</video>\n\n:::info\nKey Insights:\n\n- I gained a comprehensive understanding of Architecture Components such as `LiveData`, `ViewModel`, and `Room`, and their pivotal role in architecting resilient Android applications.\n- Delving into Room for database management and migrations unveiled its significance in ensuring efficient data storage and seamless schema evolution. [Florina Muntenescu's article, 'Understanding Migrations with Room'](https://medium.com/androiddevelopers/understanding-migrations-with-room-f01e04b07929), offered indispensable guidance in navigating the complexities of database versioning and migration strategies.\n- Exploring the intricacies of `RecyclerView` and `Adapters` provided valuable insights into optimizing UI performance, particularly in the context of managing large datasets and dynamic content presentation.\n  :::"},{"id":"disable-cors-policy-in-chrome","metadata":{"permalink":"/blog/disable-cors-policy-in-chrome","source":"@site/blog/2024-01-15-disable-cors.md","title":"Disable CORS policy in Chrome","description":"Opens a New Chrome Session with CORS disbaled","date":"2024-01-15T00:00:00.000Z","tags":[{"inline":true,"label":"cors","permalink":"/blog/tags/cors"},{"inline":true,"label":"chrome","permalink":"/blog/tags/chrome"},{"inline":true,"label":"same-origin-policy","permalink":"/blog/tags/same-origin-policy"},{"inline":true,"label":"windows","permalink":"/blog/tags/windows"},{"inline":true,"label":"mac","permalink":"/blog/tags/mac"},{"inline":true,"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":0.77,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"disable-cors-policy-in-chrome","title":"Disable CORS policy in Chrome","description":"Opens a New Chrome Session with CORS disbaled","authors":"shahpreetk","tags":["cors","chrome","same-origin-policy","windows","mac","testing"]},"unlisted":false,"prevItem":{"title":"Android Development in 2024","permalink":"/blog/android-development-in-2024"},"nextItem":{"title":"Deploying a Node.js project to Linode","permalink":"/blog/deploying-a-nodejs-project-to-linode"}},"content":"To initiate a new Chrome session with CORS disabled on **Windows** for testing purposes, you can use either of the following commands:\n\nLaunch the `Command Prompt (cmd)` terminal and navigate to the directory where the chrome.exe is situated.\n\nTypically, it can be found in either the **Program Files** or **Program Files (x86)** directories. Executing the following commands will initiate a new Chrome window with the security policy disabled:\n\n```sh\nC:\\Users\\shahpreetk> cd C:\\Program Files\\Google\\Chrome\\Application\n\n⁠\nC:\\Program Files\\Google\\Chrome\\Application> chrome.exe --user-data-dir=\"C:/temp/chrome\" -—disable-web-security \n```\n\n<!-- truncate -->\n\nOR\n\n```sh\nC:\\Users\\shahpreetk> cd C:\\Program Files (x86)\\Google\\Chrome\\Application\n\n⁠\nC:\\Program Files (x86)\\Google\\Chrome\\Application\\> ⁠ chrome.exe --user-data-dir=\"C:/temp/chrome\" --disable-web-security ⁠\n```\n\nFor **Mac**, you can achieve the same testing setup with the following commands:\n\n- To open a new Chrome session/window with CORS disabled:\n\n```sh\nopen -na \"Google Chrome\" --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security\n```\n\n- To open a new Chrome tab in an open Chrome session/window with CORS disabled:\n\n```sh\nopen -a \"Google Chrome\" --args --disable-web-security --user-data-dir\n```"},{"id":"deploying-a-nodejs-project-to-linode","metadata":{"permalink":"/blog/deploying-a-nodejs-project-to-linode","source":"@site/blog/2023-07-17-deployment-linode.md","title":"Deploying a Node.js project to Linode","description":"Deploying a Node.js project to linode","date":"2023-07-17T00:00:00.000Z","tags":[{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"backend","permalink":"/blog/tags/backend"},{"inline":true,"label":"linode","permalink":"/blog/tags/linode"}],"readingTime":3.045,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"deploying-a-nodejs-project-to-linode","title":"Deploying a Node.js project to Linode","description":"Deploying a Node.js project to linode","authors":"shahpreetk","tags":["deployment","backend","linode"]},"unlisted":false,"prevItem":{"title":"Disable CORS policy in Chrome","permalink":"/blog/disable-cors-policy-in-chrome"},"nextItem":{"title":"Deploying a Node.js project to heroku","permalink":"/blog/deploying-a-nodejs-project-to-heroku"}},"content":"To deploy a Node.js app to Linode, follow the instructions below:\n\n<!-- truncate -->\n\n0. Sign up for a Linode account\n1. Click on **Create Linode**\n2. Choose **Ubuntu LTS** for the distribution\n3. Choose a **Region** closest to you\n4. In the **Linode Plan** section, choose **Shared CPU** and then choose **Nanode 1GB**.\n5. Create a Root Password\n6. Add an SSH key or choose one from your existing keys\n7. Click **Create Linode**\n8. Wait for the Linode to show **Running**\n9. Copy the Linode SSH Access, paste it in the terminal and run it\n10. When it prompts you asking -> \"Are you sure you want to continue connecting (yes/no/fingerprint)?\", type \"yes\"\n11. Now, run the following commands ->\n\n    ```sh\n        apt-get update\n        apt-get upgrade\n        apt-get install npm\n        npm i -g n\n        n install lts\n        exit\n    ```\n\n12. Restart the server by entering your SSH Access. The server will now be using the latest node version\n13. Make sure your latest project code is pushed to a GitHub repository.\n14. Create a SSH key on your server and copy and upload to GitHub.\n15. Git clone the repository using SSH.\n16. cd into your project and run `npm install`\n17. (optional) If you want to copy the .env file from your local machine to the remote server, run the following command:\n    `scp <location_of_file_in_local_machine>/.env root@<server_ip_address>:~/<location_of_project>`\n    You can add a -r flag to the command to copy an entire folder.\n18. Run the node project to ensure it's running correctly.\n19. Then run the following commands:\n\n```js\nnpm i -g pm2 // install pm2\npm2 start <entry_file_name>.js -n <project_name> // start the project\npm2 startup ubuntu // to restart API by itself, in case of crash\napt-get install nginx // install nginx for reverse-proxy\ncd ~/etc/nginx/sites-available\nnano default\n```\n\n20. In this file make the following changes:\n\n    - a. At \"server*name *;\" replace the underscore with your domain name(with and without www prefix) or server IP address.\n    - b. In the \"location /\" block, remove the existing code and add the following:\n         ```nginx\n         location / {\n         proxy_pass http://localhost:5000;\n         proxy_http_version 1.1;\n         proxy_set_header Upgrade $http_upgrade;\n         proxy_set_header Connection 'upgrade';\n         proxy_set_header Host $host;\n         proxy_cache_bypass $http_upgrade;\n         }\n         ```\n\n    - c. **[Ctrl] + S** to save the file. **[Ctrl] + X** to exit the file.\n\n21. Run `nginx -t` to check if the changes are correct.\n22. Restart nginx by running `systemctl restart nginx`.\n23. `cd ~` and then `ufw enable` to enable the firewall.\n24. Run `ufw allow ssh`, `ufw allow http` and `ufw allow https` to allow using these methods through the firewall. The firewall restricts access trough other ports like 5000.\n25. Run `snap install --classic certbot` to install the Let's Encrypt certificate manager.\n26. Run `ln -s /snap/bin/certbot /usr/bin/certbot` to link the certificate manager to the /usr/bin/certbot folder.\n27. Setup Domain on Linode by ->\n    1. Go to **Domains** tab in sidebar.\n    2. Create a new domain.\n    3. In the \"Domain\" section, type the domain name.\n    4. Provide an email address.\n    5. In **Insert Default Records**, select **Insert Default Records from one of my Linodes**\n    6. Select the Linode you want to use.\n    7. Click **Create Domain**\n    8. Copy the NS(name servers) and add them to your domain name provider (example: namecheap) as **Custom DNS**\n    9. Click **Save**\n    10. Check if your domain (without https) now shows your project.\n28. Run `certbot --nginx`\n29. (optional) Run `certbot renew --dry-run` to check if the SSL certificate gets renewed successfully.\n30. Reload your domain to check if it is now secure.\n\nYou have now successfully deployed your project to a Linode with a SSL certificate.\n\n#### References\n\n- [Creating and Using SSH keys](https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh/)"},{"id":"deploying-a-nodejs-project-to-heroku","metadata":{"permalink":"/blog/deploying-a-nodejs-project-to-heroku","source":"@site/blog/2022-04-23-deployment-heroku.md","title":"Deploying a Node.js project to heroku","description":"Deploying a Node.js project to heroku","date":"2022-04-23T00:00:00.000Z","tags":[{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"backend","permalink":"/blog/tags/backend"},{"inline":true,"label":"heroku","permalink":"/blog/tags/heroku"}],"readingTime":0.335,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"deploying-a-nodejs-project-to-heroku","title":"Deploying a Node.js project to heroku","description":"Deploying a Node.js project to heroku","authors":"shahpreetk","tags":["deployment","backend","heroku"]},"unlisted":false,"prevItem":{"title":"Deploying a Node.js project to Linode","permalink":"/blog/deploying-a-nodejs-project-to-linode"},"nextItem":{"title":"Creating a Black Overlay on image in CSS","permalink":"/blog/creating-black-overlay-on-image-in-css"}},"content":"To deploy a Node.js app to Heroku, follow the instructions below:\n\n<!-- truncate -->\n\nIn the terminal, navigate to the root of your project and follow the steps below:\n\n```js\nnpm install -g heroku\nheroku login\nheroku apps:create <project_name> // Example, heroku apps:create vikhyaat\ngit push heroku main\n```\n\nYou can now access your backend on <b>https://\\<project_name>.herokuapp.com</b>\n\nExample, https://vikhyaat.herokuapp.com/\n\n#### References\n\n- [Deploying Node.js Apps on Heroku](https://devcenter.heroku.com/articles/deploying-nodejs)"},{"id":"creating-black-overlay-on-image-in-css","metadata":{"permalink":"/blog/creating-black-overlay-on-image-in-css","source":"@site/blog/2022-04-22-black-overlay-css.md","title":"Creating a Black Overlay on image in CSS","description":"Creating a black overlay over an image in CSS","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"css","permalink":"/blog/tags/css"},{"inline":true,"label":"overlay","permalink":"/blog/tags/overlay"},{"inline":true,"label":"styles","permalink":"/blog/tags/styles"}],"readingTime":0.195,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"creating-black-overlay-on-image-in-css","title":"Creating a Black Overlay on image in CSS","description":"Creating a black overlay over an image in CSS","authors":"shahpreetk","tags":["css","overlay","styles"]},"unlisted":false,"prevItem":{"title":"Deploying a Node.js project to heroku","permalink":"/blog/deploying-a-nodejs-project-to-heroku"},"nextItem":{"title":"Starting a MongoDB local connection in macOS","permalink":"/blog/starting-a-mongodb-local-connection-macos"}},"content":"Code for creating a black overlay in CSS over an image:\n\n<!-- truncate -->\n\n```css\n{\n  background: black;\n  overflow: hidden;\n  background: -webkit-linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),url(\"<IMAGEURL_COMES_HERE>\");\n  object-fit: cover;\n}\n```\n\n#### References\n\n- [Overlay with JavaScript](https://www.w3schools.com/howto/howto_css_overlay.asp)"},{"id":"starting-a-mongodb-local-connection-macos","metadata":{"permalink":"/blog/starting-a-mongodb-local-connection-macos","source":"@site/blog/2022-04-22-mongodb-local-connection.md","title":"Starting a MongoDB local connection in macOS","description":"Starting a MongoDB local connection in macOS using the terminal","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"databases","permalink":"/blog/tags/databases"},{"inline":true,"label":"mongodb","permalink":"/blog/tags/mongodb"},{"inline":true,"label":"nosql","permalink":"/blog/tags/nosql"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"starting-a-mongodb-local-connection-macos","title":"Starting a MongoDB local connection in macOS","description":"Starting a MongoDB local connection in macOS using the terminal","authors":"shahpreetk","tags":["databases","mongodb","nosql"]},"unlisted":false,"prevItem":{"title":"Creating a Black Overlay on image in CSS","permalink":"/blog/creating-black-overlay-on-image-in-css"},"nextItem":{"title":"Shortcut to Open folder in VSCode from cmd","permalink":"/blog/shortcut-to-open-folder-in-vscode-from-cmd"}},"content":"Following command starts the MongoDB server:\n\n`/Users/<username>/mongodb/bin/mongod --dbpath=/Users/<username>/mongodb-data`\n\n<!-- truncate -->\n\nExample of terminal command to start MongoDB local connection with MongoDB Compass in macOS:\n\n`/Users/preetshah/mongodb/bin/mongod --dbpath=/Users/preetshah/mongodb-data`\n\nThis command takes you to the MongoDB path and starts the MongoDB server.\n\n#### References\n\n- [Installing MongoDB on macOS](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/)"},{"id":"shortcut-to-open-folder-in-vscode-from-cmd","metadata":{"permalink":"/blog/shortcut-to-open-folder-in-vscode-from-cmd","source":"@site/blog/2022-04-22-open-folder-vscode.md","title":"Shortcut to Open folder in VSCode from cmd","description":"Opening a folder in VSCode using the terminal","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"terminal","permalink":"/blog/tags/terminal"},{"inline":true,"label":"vscode","permalink":"/blog/tags/vscode"},{"inline":true,"label":"shortcuts","permalink":"/blog/tags/shortcuts"}],"readingTime":0.245,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"shortcut-to-open-folder-in-vscode-from-cmd","title":"Shortcut to Open folder in VSCode from cmd","description":"Opening a folder in VSCode using the terminal","authors":"shahpreetk","tags":["terminal","vscode","shortcuts"]},"unlisted":false,"prevItem":{"title":"Starting a MongoDB local connection in macOS","permalink":"/blog/starting-a-mongodb-local-connection-macos"},"nextItem":{"title":"Child Table Data in Strapi API","permalink":"/blog/child-table-data-in-strapi-api"}},"content":"The following commands open the current folder in VSCode from the terminal:\n\n```sh\ncd <folder_name>\ncode .\n```\n\n<!-- truncate -->\n\nAlternatively, you can use the following command to open the folder in an Open VSCode window:\n\n```sh\ncode . -r\n```\n\n#### References\n\n- [VSCode Core CLI options](https://code.visualstudio.com/docs/editor/command-line#_core-cli-options)"},{"id":"child-table-data-in-strapi-api","metadata":{"permalink":"/blog/child-table-data-in-strapi-api","source":"@site/blog/2022-04-22-relation-strapi.md","title":"Child Table Data in Strapi API","description":"How to display information of related child tables for the requested parent table in Strapi API?","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"databases","permalink":"/blog/tags/databases"},{"inline":true,"label":"strapi","permalink":"/blog/tags/strapi"},{"inline":true,"label":"sql","permalink":"/blog/tags/sql"}],"readingTime":0.585,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"child-table-data-in-strapi-api","title":"Child Table Data in Strapi API","description":"How to display information of related child tables for the requested parent table in Strapi API?","authors":"shahpreetk","tags":["databases","strapi","sql"]},"unlisted":false,"prevItem":{"title":"Shortcut to Open folder in VSCode from cmd","permalink":"/blog/shortcut-to-open-folder-in-vscode-from-cmd"},"nextItem":{"title":"Reverting Commits & Local Changes in Git","permalink":"/blog/reverting-commits-and-local-changes-in-git"}},"content":"#### How to display information of related child tables for the requested parent table in Strapi API?\n\nOriginally, when requesting a Strapi API endpoint, you can only get the information of the table you requested without the information of tables it is related to.\n\n<!-- truncate -->\n\nIn order to get the details of tables joined to the requested table, you can try requesting the endpoint by using - `http://localhost:1337/api/tablename?populate=*`\n\nExample:\nIf you have a supplier to whom you owe many payments and wish to see the payments information in the supplier information, you can request this link -->\n`http://localhost:1337/api/suppliers?populate=*`\n\nSo populate here, populates the API with relations, components or dynamic zones.\n\n#### References\n\n- [Strapi Documentation](https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/populating-fields.html#population)"},{"id":"reverting-commits-and-local-changes-in-git","metadata":{"permalink":"/blog/reverting-commits-and-local-changes-in-git","source":"@site/blog/2022-04-22-remove-github-commit.md","title":"Reverting Commits & Local Changes in Git","description":"Reverting Commits & Local Changes in Git","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"github","permalink":"/blog/tags/github"}],"readingTime":0.63,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"reverting-commits-and-local-changes-in-git","title":"Reverting Commits & Local Changes in Git","description":"Reverting Commits & Local Changes in Git","authors":"shahpreetk","tags":["git","github"]},"unlisted":false,"prevItem":{"title":"Child Table Data in Strapi API","permalink":"/blog/child-table-data-in-strapi-api"},"nextItem":{"title":"Adding Images in React.js","permalink":"/blog/adding-image-in-reactjs"}},"content":"The following steps can be used to remove a commit pushed to Github:\n\n<!-- truncate -->\n\n```js\ngit log // copy the commit reference you like to go back to from the log\ngit reset <commit_ref> // reset git to the commit reference\ngit stash // stash/store the local changes from the wrong commit if you want to keep the commit changes\ngit push -f // push the changes to remote repository, (-f or --force)\ngit stash apply // get back the stored changes to local repository\ngit add . // if you have untracked/new files in the changes, you need to add them to git\ngit commit -m '<your_commit_message>' // commit the changes\n```\n\n#### References\n\n- [How can I remove a commit on GitHub?](https://stackoverflow.com/a/44415889)"},{"id":"adding-image-in-reactjs","metadata":{"permalink":"/blog/adding-image-in-reactjs","source":"@site/blog/2022-04-22-render-images-react.md","title":"Adding Images in React.js","description":"Adding Images in React.js","date":"2022-04-22T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"rendering","permalink":"/blog/tags/rendering"},{"inline":true,"label":"images","permalink":"/blog/tags/images"}],"readingTime":0.67,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"adding-image-in-reactjs","title":"Adding Images in React.js","description":"Adding Images in React.js","authors":"shahpreetk","tags":["react","rendering","images"]},"unlisted":false,"prevItem":{"title":"Reverting Commits & Local Changes in Git","permalink":"/blog/reverting-commits-and-local-changes-in-git"},"nextItem":{"title":"Deploying a React app to GitHub Pages","permalink":"/blog/deploying-a-react-app-to-github-pages"}},"content":"Images are integral to web development, impacting performance significantly. Efficient management can streamline your React app's functionality and user experience. Let's explore a streamlined approach.\n\n<!-- truncate -->\n\n**Streamlining Image Handling in React:**\n\nOne common method involves creating an `assets/images` folder within your `src` directory and importing images throughout your project. However, optimizing this process can further enhance performance.\n\n**Using the Public Folder for Images (or Files):**\n\n1. Create an assets or images folder in your project's `public` directory.\n2. Store your images/files here for easy access.\n3. Within React components, reference images directly using `/assets/<image_name>` in the `src` attribute.\n\n**Optimizing Image Size:**\n\nUtilize tools like [TinyPNG](https://tinypng.com/) to compress image files while maintaining quality. This reduces load times and enhances user experience, contributing to improved overall performance.\n\n#### References\n\n- [Storing images in react](https://www.upbeatcode.com/react/where-to-store-images-in-react-app/)"},{"id":"deploying-a-react-app-to-github-pages","metadata":{"permalink":"/blog/deploying-a-react-app-to-github-pages","source":"@site/blog/2022-04-21-deployment-githubpages.md","title":"Deploying a React app to GitHub Pages","description":"Deploying a React app to GitHub Pages(ghpages)","date":"2022-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"gh-pages","permalink":"/blog/tags/gh-pages"}],"readingTime":0.41,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"deploying-a-react-app-to-github-pages","title":"Deploying a React app to GitHub Pages","description":"Deploying a React app to GitHub Pages(ghpages)","authors":"shahpreetk","tags":["deployment","react","gh-pages"]},"unlisted":false,"prevItem":{"title":"Adding Images in React.js","permalink":"/blog/adding-image-in-reactjs"},"nextItem":{"title":"Deploying a React App to Netlify","permalink":"/blog/deploying-a-react-app-to-netlify"}},"content":"To deploy a React app to GitHub Pages, follow the instructions below:\n\n<!-- truncate -->\n\n1. Install gh-pages as a dev depedency: `npm install -D gh-pages`\n2. In package.json add the following in scripts:\n\n```sh\n\"predeploy\": \"npm run build\",\n\"deploy\": \"gh-pages -d build\",\n\"build\": \"react-scripts build && cp build/index.html build/404.html\",\n```\n\n3. Run `npm run deploy` to deploy the site to GitHub Pages.\n\nNOTE: On Windows cmd, it will be `copy` instead of `cp`.\n\n#### References\n\n- [Creating a GitHub Pages site](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site)"},{"id":"deploying-a-react-app-to-netlify","metadata":{"permalink":"/blog/deploying-a-react-app-to-netlify","source":"@site/blog/2022-04-21-deployment-netlify.md","title":"Deploying a React App to Netlify","description":"Deploying a React App to Netlify","date":"2022-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"netlify","permalink":"/blog/tags/netlify"}],"readingTime":0.99,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"deploying-a-react-app-to-netlify","title":"Deploying a React App to Netlify","description":"Deploying a React App to Netlify","authors":"shahpreetk","tags":["deployment","react","netlify"]},"unlisted":false,"prevItem":{"title":"Deploying a React app to GitHub Pages","permalink":"/blog/deploying-a-react-app-to-github-pages"},"nextItem":{"title":"Deploying a React App to Surge.sh","permalink":"/blog/deploying-a-react-app-to-surge-sh"}},"content":"To deploy a React app to Netlify, follow the instructions below:\n\n<!-- truncate -->\n\n1. Some Pre-requisites\n   1. For deploying to netlify make a `_redirects` file in the public folder\n   2. Enter `/* /index.html 200` in the \\_redirects file. This is for client side routing.\n   3. There should be no unused variables or imports in the code as it causes netlify build to fail.\n   4. All tags in index.html should be closed (example unclosed `<br>` tag works in normal html but breaks on netlify).\n2. Login to Netlify\n3. Select **New site from Git**\n4. Choose **Github**\n5. Configure the Netlify app on GitHub and choose the repository you wish to publish then select save.\n6. Select the repository on netlify and click on Deploy Site. Netlify will now deploy the site for you.\n7. You can change the domain that the site is hosted on by changing the name in Domain Settings.\n8. Stopping Auto Publish under the Deploys option helps save build time.\n\n<u>ALTERNATIVELY</u>: If you don't want to connect GitHub to Netlify, you can just drag and drop the `build` folder to the [Netlify Site Drop](https://app.netlify.com/drop)\n\n#### References\n\n- [Deploy a React App to Netlify](https://www.netlify.com/blog/2016/07/22/deploy-react-apps-in-less-than-30-seconds/)"},{"id":"deploying-a-react-app-to-surge-sh","metadata":{"permalink":"/blog/deploying-a-react-app-to-surge-sh","source":"@site/blog/2022-04-21-deployment-surge.md","title":"Deploying a React App to Surge.sh","description":"Deploying a React App to Surge.sh","date":"2022-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"surge","permalink":"/blog/tags/surge"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"Preet Shah","title":"Software Developer @ JPMC","url":"https://github.com/shahpreetk","description":"Preet Shah is a Full-Stack Software Developer at JP Morgan Chase, specialising in Java Spring Boot, Python and React. Preet is an AWS Certified Associate, currently aiming for her Developer Certification. In her free time, she enjoys crocheting, diving into murder mystery novels, and watching cat videos.","page":{"permalink":"/blog/authors/shahpreetk"},"socials":{"x":"https://x.com/shahpreetk","linkedin":"https://www.linkedin.com/in/shahpreetk/"},"imageURL":"https://github.com/shahpreetk.png\\","key":"shahpreetk"}],"frontMatter":{"slug":"deploying-a-react-app-to-surge-sh","title":"Deploying a React App to Surge.sh","description":"Deploying a React App to Surge.sh","authors":"shahpreetk","tags":["deployment","react","surge"]},"unlisted":false,"prevItem":{"title":"Deploying a React App to Netlify","permalink":"/blog/deploying-a-react-app-to-netlify"}},"content":"To deploy a React app to Surge.sh, follow the instructions below:\n\n<!-- truncate -->\n\n1. Create a new file named `CNAME` in the public folder and enter the name of your surge domain in it.\n2. In the terminal in the root directory of your project, run the following commands:\n\n```sh\nnpm run build\ncd build\n```\n\n4. Rename `index.html` to `200.html` in the build folder, for client side routing.\n5. Run `surge` in the terminal to deploy your app to surge.sh\n\n#### References\n\n- [Getting started with Surge](https://surge.sh/help/getting-started-with-surge)\n- [Remembering a domain](https://surge.sh/help/remembering-a-domain)"}]}}